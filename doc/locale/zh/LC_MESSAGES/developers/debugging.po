# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../developers/debugging.rst:5
msgid "Developers' Tips for Debugging"
msgstr ""

#: ../../developers/debugging.rst:8
msgid "Memory errors: debugging Cython with valgrind"
msgstr ""

#: ../../developers/debugging.rst:10
msgid ""
"While python/numpy's built-in memory management is relatively robust, it "
"can lead to performance penalties for some routines. For this reason, "
"much of the high-performance code in scikit-learn in written in cython. "
"This performance gain comes with a tradeoff, however: it is very easy for"
" memory bugs to crop up in cython code, especially in situations where "
"that code relies heavily on pointer arithmetic."
msgstr ""

#: ../../developers/debugging.rst:17
msgid ""
"Memory errors can manifest themselves a number of ways. The easiest ones "
"to debug are often segmentation faults and related glibc errors. "
"Uninitialized variables can lead to unexpected behavior that is difficult"
" to track down. A very useful tool when debugging these sorts of errors "
"is valgrind_."
msgstr ""

#: ../../developers/debugging.rst:24
msgid ""
"Valgrind is a command-line tool that can trace memory errors in a variety"
" of code. Follow these steps:"
msgstr ""

#: ../../developers/debugging.rst:27
msgid "Install `valgrind`_ on your system."
msgstr ""

#: ../../developers/debugging.rst:29
msgid "Download the python valgrind suppression file: `valgrind-python.supp`_."
msgstr ""

#: ../../developers/debugging.rst:31
msgid ""
"Follow the directions in the `README.valgrind`_ file to customize your "
"python suppressions. If you don't, you will have spurious output coming "
"related to the python interpreter instead of your own code."
msgstr ""

#: ../../developers/debugging.rst:35
msgid "Run valgrind as follows::"
msgstr ""

#: ../../developers/debugging.rst:44
msgid ""
"The result will be a list of all the memory-related errors, which "
"reference lines in the C-code generated by cython from your .pyx file. If"
" you examine the referenced lines in the .c file, you will see comments "
"which indicate the corresponding location in your .pyx source file. "
"Hopefully the output will give you clues as to the source of your memory "
"error."
msgstr ""

#: ../../developers/debugging.rst:50
msgid ""
"For more information on valgrind and the array of options it has, see the"
" tutorials and documentation on the `valgrind web site "
"<http://valgrind.org>`_."
msgstr ""

