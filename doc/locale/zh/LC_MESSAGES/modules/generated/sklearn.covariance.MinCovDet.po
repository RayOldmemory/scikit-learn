# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.covariance.MinCovDet.rst:2
msgid ":mod:`sklearn.covariance`.MinCovDet"
msgstr ""

#: :3
msgid "Minimum Covariance Determinant (MCD): robust estimator of covariance."
msgstr ""

#: :5
msgid ""
"The Minimum Covariance Determinant covariance estimator is to be applied "
"on Gaussian-distributed data, but could still be relevant on data drawn "
"from a unimodal, symmetric distribution. It is not meant to be used with "
"multi-modal data (the algorithm used to fit a MinCovDet object is likely "
"to fail in such a case). One should consider projection pursuit methods "
"to deal with multi-modal datasets."
msgstr ""

#: :13
msgid "Read more in the :ref:`User Guide <robust_covariance>`."
msgstr ""

#: :17
msgid "**store_precision** : bool"
msgstr ""

#: :19
msgid "Specify if the estimated precision is stored."
msgstr ""

#: :21
msgid "**assume_centered** : Boolean"
msgstr ""

#: :23
msgid ""
"If True, the support of the robust location and the covariance estimates "
"is computed, and a covariance estimate is recomputed from it, without "
"centering the data. Useful to work with data whose mean is significantly "
"equal to zero but is not exactly zero. If False, the robust location and "
"covariance are directly computed with the FastMCD algorithm without "
"additional treatment."
msgstr ""

#: :31
msgid "**support_fraction** : float, 0 < support_fraction < 1"
msgstr ""

#: :33
msgid ""
"The proportion of points to be included in the support of the raw MCD "
"estimate. Default is None, which implies that the minimum value of "
"support_fraction will be used within the algorithm: [n_sample + "
"n_features + 1] / 2"
msgstr ""

#: :38
msgid "**random_state** : integer or numpy.RandomState, optional"
msgstr ""

#: :40
msgid ""
"The random generator used. If an integer is given, it fixes the seed. "
"Defaults to the global numpy random number generator."
msgstr ""

#: :45
msgid "**raw_location_** : array-like, shape (n_features,)"
msgstr ""

#: :47
msgid "The raw robust estimated location before correction and re-weighting."
msgstr ""

#: :49
msgid "**raw_covariance_** : array-like, shape (n_features, n_features)"
msgstr ""

#: :51
msgid "The raw robust estimated covariance before correction and re-weighting."
msgstr ""

#: :53
msgid "**raw_support_** : array-like, shape (n_samples,)"
msgstr ""

#: :55
msgid ""
"A mask of the observations that have been used to compute the raw robust "
"estimates of location and shape, before correction and re-weighting."
msgstr ""

#: :59
msgid "**location_** : array-like, shape (n_features,)"
msgstr ""

#: :61
msgid "Estimated robust location"
msgstr ""

#: :63
msgid "**covariance_** : array-like, shape (n_features, n_features)"
msgstr ""

#: :65
msgid "Estimated robust covariance matrix"
msgstr ""

#: :67
msgid "**precision_** : array-like, shape (n_features, n_features)"
msgstr ""

#: :69
msgid "Estimated pseudo inverse matrix. (stored only if store_precision is True)"
msgstr ""

#: :72
msgid "**support_** : array-like, shape (n_samples,)"
msgstr ""

#: :74
msgid ""
"A mask of the observations that have been used to compute the robust "
"estimates of location and shape."
msgstr ""

#: :77
msgid "**dist_** : array-like, shape (n_samples,)"
msgstr ""

#: :79
msgid ""
"Mahalanobis distances of the training set (on which `fit` is called) "
"observations."
msgstr ""

#: :83
msgid "References"
msgstr ""

#: :84
msgid ""
"`P. J. Rousseeuw. Least median of squares regression. J. Am Stat Ass, "
"79:871, 1984.`"
msgstr ""

#: :86
msgid ""
"`A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999,"
" American Statistical Association and the American Society for Quality, "
"TECHNOMETRICS`"
msgstr ""

#: :89
msgid ""
"`R. W. Butler, P. L. Davies and M. Jhun, Asymptotics For The Minimum "
"Covariance Determinant Estimator, The Annals of Statistics, 1993, Vol. "
"21, No. 3, 1385-1400`"
msgstr ""

#: :98
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`correct_covariance "
"<sklearn.covariance.MinCovDet.correct_covariance>`\\ (data)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Apply a correction to raw Minimum Covariance Determinant estimates."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`error_norm <sklearn.covariance.MinCovDet.error_norm>`\\ (comp_cov[,"
" norm, scaling, squared])"
msgstr ""

#: ../../<autosummary>:1
msgid "Computes the Mean Squared Error between two covariance estimators."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`fit <sklearn.covariance.MinCovDet.fit>`\\ (X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fits a Minimum Covariance Determinant with the FastMCD algorithm."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`get_params <sklearn.covariance.MinCovDet.get_params>`\\ ([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`get_precision <sklearn.covariance.MinCovDet.get_precision>`\\ ()"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Getter for the precision matrix."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`mahalanobis <sklearn.covariance.MinCovDet.mahalanobis>`\\ "
"(observations)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Computes the squared Mahalanobis distances of given observations."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`reweight_covariance "
"<sklearn.covariance.MinCovDet.reweight_covariance>`\\ (data)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Re-weight raw Minimum Covariance Determinant estimates."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`score <sklearn.covariance.MinCovDet.score>`\\ (X_test[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid ""
"Computes the log-likelihood of a Gaussian data set with "
"`self.covariance_` as an estimator of its covariance matrix."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.covariance.MinCovDet.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: :5
msgid ""
"Correction using the empirical correction factor suggested by Rousseeuw "
"and Van Driessen in [Rouseeuw1984]_."
msgstr ""

#: :10 :11
msgid "**data** : array-like, shape (n_samples, n_features)"
msgstr ""

#: :12 :13
msgid ""
"The data matrix, with p features and n samples. The data set must be the "
"one which was used to compute the raw estimates."
msgstr ""

#: :18
msgid "**covariance_corrected** : array-like, shape (n_features, n_features)"
msgstr ""

#: :20
msgid "Corrected robust covariance estimate."
msgstr ""

#: :3
msgid ""
"Computes the Mean Squared Error between two covariance estimators. (In "
"the sense of the Frobenius norm)."
msgstr ""

#: :8
msgid "**comp_cov** : array-like, shape = [n_features, n_features]"
msgstr ""

#: :10
msgid "The covariance to compare with."
msgstr ""

#: :12
msgid "**norm** : str"
msgstr ""

#: :14
msgid ""
"The type of norm used to compute the error. Available error types: - "
"'frobenius' (default): sqrt(tr(A^t.A)) - 'spectral': "
"sqrt(max(eigenvalues(A^t.A)) where A is the error ``(comp_cov - "
"self.covariance_)``."
msgstr ""

#: :19
msgid "**scaling** : bool"
msgstr ""

#: :21
msgid ""
"If True (default), the squared error norm is divided by n_features. If "
"False, the squared error norm is not rescaled."
msgstr ""

#: :24
msgid "**squared** : bool"
msgstr ""

#: :26
msgid ""
"Whether to compute the squared error norm or the error norm. If True "
"(default), the squared error norm is returned. If False, the error norm "
"is returned."
msgstr ""

#: :32
msgid "**The Mean Squared Error (in the sense of the Frobenius norm) between** :"
msgstr ""

#: :34
msgid "**`self` and `comp_cov` covariance estimators.** :"
msgstr ""

#: :7
msgid "**X** : array-like, shape = [n_samples, n_features]"
msgstr ""

#: :9
msgid ""
"Training data, where n_samples is the number of samples and n_features is"
" the number of features."
msgstr ""

#: :12 :15
msgid "**y** : not used, present for API consistence purpose."
msgstr ""

#: :16
msgid "**self** : object"
msgstr ""

#: :18
msgid "Returns self."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :7
msgid "**precision_** : array-like,"
msgstr ""

#: :9
msgid "The precision matrix associated to the current covariance object."
msgstr ""

#: :7
msgid "**observations** : array-like, shape = [n_observations, n_features]"
msgstr ""

#: :9
msgid ""
"The observations, the Mahalanobis distances of the which we compute. "
"Observations are assumed to be drawn from the same distribution than the "
"data used in fit."
msgstr ""

#: :15
msgid "**mahalanobis_distance** : array, shape = [n_observations,]"
msgstr ""

#: :17
msgid "Squared Mahalanobis distances of the observations."
msgstr ""

#: :5
msgid ""
"Re-weight observations using Rousseeuw's method (equivalent to deleting "
"outlying observations from the data set before computing location and "
"covariance estimates). [Rouseeuw1984]_"
msgstr ""

#: :19
msgid "**location_reweighted** : array-like, shape (n_features, )"
msgstr ""

#: :21
msgid "Re-weighted robust location estimate."
msgstr ""

#: :23
msgid "**covariance_reweighted** : array-like, shape (n_features, n_features)"
msgstr ""

#: :25
msgid "Re-weighted robust covariance estimate."
msgstr ""

#: :27
msgid "**support_reweighted** : array-like, type boolean, shape (n_samples,)"
msgstr ""

#: :29
msgid ""
"A mask of the observations that have been used to compute the re-weighted"
" robust location and covariance estimates."
msgstr ""

#: :8
msgid "**X_test** : array-like, shape = [n_samples, n_features]"
msgstr ""

#: :10
msgid ""
"Test data of which we compute the likelihood, where n_samples is the "
"number of samples and n_features is the number of features. X_test is "
"assumed to be drawn from the same distribution than the data used in fit "
"(including centering)."
msgstr ""

#: :19
msgid "**res** : float"
msgstr ""

#: :21
msgid ""
"The likelihood of the data set with `self.covariance_` as an estimator of"
" its covariance matrix."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: ../../modules/generated/sklearn.covariance.MinCovDet.examples:3
msgid "Examples using ``sklearn.covariance.MinCovDet``"
msgstr ""

#: ../../modules/generated/sklearn.covariance.MinCovDet.examples:25
msgid ":ref:`example_covariance_plot_mahalanobis_distances.py`"
msgstr ""

#: ../../modules/generated/sklearn.covariance.MinCovDet.examples:45
msgid ":ref:`example_covariance_plot_robust_vs_empirical_covariance.py`"
msgstr ""

