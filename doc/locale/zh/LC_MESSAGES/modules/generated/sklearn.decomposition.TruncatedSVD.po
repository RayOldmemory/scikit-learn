# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.decomposition.TruncatedSVD.rst:2
msgid ":mod:`sklearn.decomposition`.TruncatedSVD"
msgstr ""

#: :3
msgid "Dimensionality reduction using truncated SVD (aka LSA)."
msgstr ""

#: :5
msgid ""
"This transformer performs linear dimensionality reduction by means of "
"truncated singular value decomposition (SVD). It is very similar to PCA, "
"but operates on sample vectors directly, instead of on a covariance "
"matrix. This means it can work with scipy.sparse matrices efficiently."
msgstr ""

#: :10
msgid ""
"In particular, truncated SVD works on term count/tf-idf matrices as "
"returned by the vectorizers in sklearn.feature_extraction.text. In that "
"context, it is known as latent semantic analysis (LSA)."
msgstr ""

#: :14
msgid ""
"This estimator supports two algorithm: a fast randomized SVD solver, and "
"a \"naive\" algorithm that uses ARPACK as an eigensolver on (X * X.T) or "
"(X.T * X), whichever is more efficient."
msgstr ""

#: :18
msgid "Read more in the :ref:`User Guide <LSA>`."
msgstr ""

#: :22
msgid "**n_components** : int, default = 2"
msgstr ""

#: :24
msgid ""
"Desired dimensionality of output data. Must be strictly less than the "
"number of features. The default value is useful for visualisation. For "
"LSA, a value of 100 is recommended."
msgstr ""

#: :29
msgid "**algorithm** : string, default = \"randomized\""
msgstr ""

#: :31
msgid ""
"SVD solver to use. Either \"arpack\" for the ARPACK wrapper in SciPy "
"(scipy.sparse.linalg.svds), or \"randomized\" for the randomized "
"algorithm due to Halko (2009)."
msgstr ""

#: :35
msgid "**n_iter** : int, optional"
msgstr ""

#: :37
msgid "Number of iterations for randomized SVD solver. Not used by ARPACK."
msgstr ""

#: :39
msgid "**random_state** : int or RandomState, optional"
msgstr ""

#: :41
msgid ""
"(Seed for) pseudo-random number generator. If not given, the numpy.random"
" singleton is used."
msgstr ""

#: :44
msgid "**tol** : float, optional"
msgstr ""

#: :46
msgid ""
"Tolerance for ARPACK. 0 means machine precision. Ignored by randomized "
"SVD solver."
msgstr ""

#: :51
msgid "**components_** : array, shape (n_components, n_features)"
msgstr ""

#: :53
msgid "**explained_variance_ratio_** : array, [n_components]"
msgstr ""

#: :55
msgid "Percentage of variance explained by each of the selected components."
msgstr ""

#: :57
msgid "**explained_variance_** : array, [n_components]"
msgstr ""

#: :59
msgid ""
"The variance of the training samples transformed by a projection to each "
"component."
msgstr ""

#: :64
msgid ":obj:`PCA`, :obj:`RandomizedPCA`"
msgstr ""

#: :67
msgid "Notes"
msgstr ""

#: :68
msgid ""
"SVD suffers from a problem called \"sign indeterminancy\", which means "
"the sign of the ``components_`` and the output from transform depend on "
"the algorithm and random state. To work around this, fit instances of "
"this class to data once, then keep the instance around to do "
"transformations."
msgstr ""

#: :74
msgid "References"
msgstr ""

#: :75
msgid ""
"Finding structure with randomness: Stochastic algorithms for constructing"
" approximate matrix decompositions Halko, et al., 2009 (arXiv:909) "
"http://arxiv.org/pdf/0909.4061"
msgstr ""

#: :82
msgid "Examples"
msgstr ""

#: :96
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`fit <sklearn.decomposition.TruncatedSVD.fit>`\\ (X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit LSI model on training data X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit_transform <sklearn.decomposition.TruncatedSVD.fit_transform>`\\"
" (X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit LSI model to X and perform dimensionality reduction on X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params <sklearn.decomposition.TruncatedSVD.get_params>`\\ "
"([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`inverse_transform "
"<sklearn.decomposition.TruncatedSVD.inverse_transform>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Transform X back to its original space."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.decomposition.TruncatedSVD.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`transform <sklearn.decomposition.TruncatedSVD.transform>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Perform dimensionality reduction on X."
msgstr ""

#: :7
msgid "**X** : {array-like, sparse matrix}, shape (n_samples, n_features)"
msgstr ""

#: :9
msgid "Training data."
msgstr ""

#: :13
msgid "**self** : object"
msgstr ""

#: :15
msgid "Returns the transformer object."
msgstr ""

#: :13
msgid "**X_new** : array, shape (n_samples, n_components)"
msgstr ""

#: :15
msgid "Reduced version of X. This will always be a dense array."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid "Returns an array X_original whose transform would be X."
msgstr ""

#: :9
msgid "**X** : array-like, shape (n_samples, n_components)"
msgstr ""

#: :11 :9
msgid "New data."
msgstr ""

#: :15
msgid "**X_original** : array, shape (n_samples, n_features)"
msgstr ""

#: :17
msgid "Note that this is always a dense array."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: ../../modules/generated/sklearn.decomposition.TruncatedSVD.examples:3
msgid "Examples using ``sklearn.decomposition.TruncatedSVD``"
msgstr ""

#: ../../modules/generated/sklearn.decomposition.TruncatedSVD.examples:25
msgid ":ref:`example_hetero_feature_union.py`"
msgstr ""

#: ../../modules/generated/sklearn.decomposition.TruncatedSVD.examples:45
msgid ":ref:`example_ensemble_plot_random_forest_embedding.py`"
msgstr ""

#: ../../modules/generated/sklearn.decomposition.TruncatedSVD.examples:65
msgid ":ref:`example_manifold_plot_lle_digits.py`"
msgstr ""

#: ../../modules/generated/sklearn.decomposition.TruncatedSVD.examples:85
msgid ":ref:`example_text_document_clustering.py`"
msgstr ""

