# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst:2
msgid ":mod:`sklearn.discriminant_analysis`.QuadraticDiscriminantAnalysis"
msgstr ""

#: :3
msgid "Quadratic Discriminant Analysis"
msgstr ""

#: :5
msgid ""
"A classifier with a quadratic decision boundary, generated by fitting "
"class conditional densities to the data and using Bayes' rule."
msgstr ""

#: :9
msgid "The model fits a Gaussian density to each class."
msgstr ""

#: :11
msgid "*QuadraticDiscriminantAnalysis*"
msgstr ""

#: :14
msgid ""
"Deprecated :class:`qda.QDA` have been moved to "
"*QuadraticDiscriminantAnalysis*."
msgstr ""

#: :19
msgid "**priors** : array, optional, shape = [n_classes]"
msgstr ""

#: :21
msgid "Priors on classes"
msgstr ""

#: :23
msgid "**reg_param** : float, optional"
msgstr ""

#: :25
msgid ""
"Regularizes the covariance estimate as ``(1-reg_param)*Sigma + "
"reg_param*np.eye(n_features)``"
msgstr ""

#: :30
msgid "**covariances_** : list of array-like, shape = [n_features, n_features]"
msgstr ""

#: :32
msgid "Covariance matrices of each class."
msgstr ""

#: :34
msgid "**means_** : array-like, shape = [n_classes, n_features]"
msgstr ""

#: :36
msgid "Class means."
msgstr ""

#: :38
msgid "**priors_** : array-like, shape = [n_classes]"
msgstr ""

#: :40
msgid "Class priors (sum to 1)."
msgstr ""

#: :42
msgid "**rotations_** : list of arrays"
msgstr ""

#: :44
msgid ""
"For each class k an array of shape [n_features, n_k], with ``n_k = "
"min(n_features, number of elements in class k)`` It is the rotation of "
"the Gaussian distribution, i.e. its principal axis."
msgstr ""

#: :49
msgid "**scalings_** : list of arrays"
msgstr ""

#: :51
msgid ""
"For each class k an array of shape [n_k]. It contains the scaling of the "
"Gaussian distributions along its principal axes, i.e. the variance in the"
" rotated coordinate system."
msgstr ""

#: :55
msgid "**store_covariances** : boolean"
msgstr ""

#: :57
msgid ""
"If True the covariance matrices are computed and stored in the "
"`self.covariances_` attribute."
msgstr ""

#: :62
msgid "**tol** : float, optional, default 1.0e-4"
msgstr ""

#: :64
msgid "Threshold used for rank estimation."
msgstr ""

#: :70
msgid ":obj:`sklearn.discriminant_analysis.LinearDiscriminantAnalysis`"
msgstr ""

#: :71
msgid "Linear Discriminant Analysis"
msgstr ""

#: :74
msgid "Examples"
msgstr ""

#: :88
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`decision_function "
"<sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function>`\\"
" (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Apply decision function to an array of samples."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit "
"<sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit>`\\ (X, "
"y[, store_covariances, tol])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit the model according to the given training data and parameters."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params "
"<sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params>`\\"
" ([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`predict "
"<sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict>`\\ "
"(X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Perform classification on an array of test vectors X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`predict_log_proba "
"<sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba>`\\"
" (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Return posterior probabilities of classification."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`predict_proba "
"<sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba>`\\"
" (X)"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`score "
"<sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score>`\\ "
"(X, y[, sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns the mean accuracy on the given test data and labels."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params "
"<sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params>`\\"
" (\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: :7 :13 :9
msgid "**X** : array-like, shape = [n_samples, n_features]"
msgstr ""

#: :9
msgid "Array of samples (test vectors)."
msgstr ""

#: :13
msgid "**C** : array, shape = [n_samples, n_classes] or [n_samples,]"
msgstr ""

#: :15
msgid ""
"Decision function values related to each class, per sample. In the two-"
"class case, the shape is [n_samples,], giving the log likelihood ratio of"
" the positive class."
msgstr ""

#: :5
msgid "Deprecated *store_covariance* have been moved to main constructor."
msgstr ""

#: :8
msgid "Deprecated *tol* have been moved to main constructor."
msgstr ""

#: :15
msgid ""
"Training vector, where n_samples in the number of samples and n_features "
"is the number of features."
msgstr ""

#: :18
msgid "**y** : array, shape = [n_samples]"
msgstr ""

#: :20
msgid "Target values (integers)"
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid "The predicted class C for each sample in X is returned."
msgstr ""

#: :13
msgid "**C** : array, shape = [n_samples]"
msgstr ""

#: :9
msgid "Array of samples/test vectors."
msgstr ""

#: :13
msgid "**C** : array, shape = [n_samples, n_classes]"
msgstr ""

#: :15
msgid "Posterior log-probabilities of classification per class."
msgstr ""

#: :15
msgid "Posterior probabilities of classification per class."
msgstr ""

#: :5
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: :11
msgid "**X** : array-like, shape = (n_samples, n_features)"
msgstr ""

#: :13
msgid "Test samples."
msgstr ""

#: :15
msgid "**y** : array-like, shape = (n_samples) or (n_samples, n_outputs)"
msgstr ""

#: :17
msgid "True labels for X."
msgstr ""

#: :19
msgid "**sample_weight** : array-like, shape = [n_samples], optional"
msgstr ""

#: :21
msgid "Sample weights."
msgstr ""

#: :25
msgid "**score** : float"
msgstr ""

#: :27
msgid "Mean accuracy of self.predict(X) wrt. y."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: ../../modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.examples:3
msgid ""
"Examples using "
"``sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis``"
msgstr ""

#: ../../modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.examples:25
msgid ":ref:`example_classification_plot_classifier_comparison.py`"
msgstr ""

#: ../../modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.examples:45
msgid ":ref:`example_classification_plot_lda_qda.py`"
msgstr ""

