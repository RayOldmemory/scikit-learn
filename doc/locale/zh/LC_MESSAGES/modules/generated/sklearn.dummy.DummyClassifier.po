# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.dummy.DummyClassifier.rst:2
msgid ":mod:`sklearn.dummy`.DummyClassifier"
msgstr ""

#: :3
msgid "DummyClassifier is a classifier that makes predictions using simple rules."
msgstr ""

#: :5
msgid ""
"This classifier is useful as a simple baseline to compare with other "
"(real) classifiers. Do not use it for real problems."
msgstr ""

#: :8
msgid "Read more in the :ref:`User Guide <dummy_estimators>`."
msgstr ""

#: :12
msgid "**strategy** : str"
msgstr ""

#: :14
msgid "Strategy to use to generate predictions."
msgstr ""

#: :16
msgid ""
"\"stratified\": generates predictions by respecting the training set's "
"class distribution."
msgstr ""

#: :18
msgid ""
"\"most_frequent\": always predicts the most frequent label in the "
"training set."
msgstr ""

#: :20
msgid ""
"\"prior\": always predicts the class that maximizes the class prior (like"
" \"most_frequent\") and ``predict_proba`` returns the class prior."
msgstr ""

#: :22
msgid "\"uniform\": generates predictions uniformly at random."
msgstr ""

#: :23
msgid ""
"\"constant\": always predicts a constant label that is provided by the "
"user. This is useful for metrics that evaluate a non-majority class"
msgstr ""

#: :27
msgid ""
"Dummy Classifier now supports prior fitting strategy using parameter "
"*prior*."
msgstr ""

#: :31
msgid "**random_state** : int seed, RandomState instance, or None (default)"
msgstr ""

#: :33
msgid "The seed of the pseudo random number generator to use."
msgstr ""

#: :35
msgid "**constant** : int or str or array of shape = [n_outputs]"
msgstr ""

#: :37
msgid ""
"The explicit constant as predicted by the \"constant\" strategy. This "
"parameter is useful only for the \"constant\" strategy."
msgstr ""

#: :42
msgid "**classes_** : array or list of array of shape = [n_classes]"
msgstr ""

#: :44
msgid "Class labels for each output."
msgstr ""

#: :46
msgid "**n_classes_** : array or list of array of shape = [n_classes]"
msgstr ""

#: :48
msgid "Number of label for each output."
msgstr ""

#: :50
msgid "**class_prior_** : array or list of array of shape = [n_classes]"
msgstr ""

#: :52
msgid "Probability of each class for each output."
msgstr ""

#: :54
msgid "**n_outputs_** : int,"
msgstr ""

#: :56
msgid "Number of outputs."
msgstr ""

#: :58
msgid "**outputs_2d_** : bool,"
msgstr ""

#: :60
msgid "True if the output at fit is 2d, else false."
msgstr ""

#: :62
msgid "**sparse_output_** : bool,"
msgstr ""

#: :64
msgid ""
"True if the array returned from predict is to be in sparse CSC format. Is"
" automatically set to True if the input y is passed in sparse format."
msgstr ""

#: :68
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`fit <sklearn.dummy.DummyClassifier.fit>`\\ (X, y[, sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit the random classifier."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`get_params <sklearn.dummy.DummyClassifier.get_params>`\\ ([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`predict <sklearn.dummy.DummyClassifier.predict>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Perform classification on test vectors X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`predict_log_proba "
"<sklearn.dummy.DummyClassifier.predict_log_proba>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Return log probability estimates for the test vectors X."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`predict_proba <sklearn.dummy.DummyClassifier.predict_proba>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Return probability estimates for the test vectors X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`score <sklearn.dummy.DummyClassifier.score>`\\ (X, y[, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns the mean accuracy on the given test data and labels."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.dummy.DummyClassifier.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: :7
msgid "**X** : {array-like, sparse matrix}, shape = [n_samples, n_features]"
msgstr ""

#: :9
msgid ""
"Training vectors, where n_samples is the number of samples and n_features"
" is the number of features."
msgstr ""

#: :12
msgid "**y** : array-like, shape = [n_samples] or [n_samples, n_outputs]"
msgstr ""

#: :14
msgid "Target values."
msgstr ""

#: :16
msgid "**sample_weight** : array-like of shape = [n_samples], optional"
msgstr ""

#: :18 :21
msgid "Sample weights."
msgstr ""

#: :22
msgid "**self** : object"
msgstr ""

#: :24
msgid "Returns self."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :9
msgid ""
"Input vectors, where n_samples is the number of samples and n_features is"
" the number of features."
msgstr ""

#: :14
msgid "**y** : array, shape = [n_samples] or [n_samples, n_outputs]"
msgstr ""

#: :16
msgid "Predicted target values for X."
msgstr ""

#: :14
msgid "**P** : array-like or list of array-like of shape = [n_samples, n_classes]"
msgstr ""

#: :16
msgid ""
"Returns the log probability of the sample for each class in the model, "
"where classes are ordered arithmetically for each output."
msgstr ""

#: :14
msgid "**P** : array-like or list of array-lke of shape = [n_samples, n_classes]"
msgstr ""

#: :16
msgid ""
"Returns the probability of the sample for each class in the model, where "
"classes are ordered arithmetically, for each output."
msgstr ""

#: :5
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: :11
msgid "**X** : array-like, shape = (n_samples, n_features)"
msgstr ""

#: :13
msgid "Test samples."
msgstr ""

#: :15
msgid "**y** : array-like, shape = (n_samples) or (n_samples, n_outputs)"
msgstr ""

#: :17
msgid "True labels for X."
msgstr ""

#: :19
msgid "**sample_weight** : array-like, shape = [n_samples], optional"
msgstr ""

#: :25
msgid "**score** : float"
msgstr ""

#: :27
msgid "Mean accuracy of self.predict(X) wrt. y."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

