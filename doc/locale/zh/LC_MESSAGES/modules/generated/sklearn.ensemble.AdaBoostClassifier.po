# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.ensemble.AdaBoostClassifier.rst:2
msgid ":mod:`sklearn.ensemble`.AdaBoostClassifier"
msgstr ""

#: :3
msgid "An AdaBoost classifier."
msgstr ""

#: :5
msgid ""
"An AdaBoost [1] classifier is a meta-estimator that begins by fitting a "
"classifier on the original dataset and then fits additional copies of the"
" classifier on the same dataset but where the weights of incorrectly "
"classified instances are adjusted such that subsequent classifiers focus "
"more on difficult cases."
msgstr ""

#: :11
msgid "This class implements the algorithm known as AdaBoost-SAMME [2]."
msgstr ""

#: :13
msgid "Read more in the :ref:`User Guide <adaboost>`."
msgstr ""

#: :17
msgid "**base_estimator** : object, optional (default=DecisionTreeClassifier)"
msgstr ""

#: :19
msgid ""
"The base estimator from which the boosted ensemble is built. Support for "
"sample weighting is required, as well as proper `classes_` and "
"`n_classes_` attributes."
msgstr ""

#: :23
msgid "**n_estimators** : integer, optional (default=50)"
msgstr ""

#: :25
msgid ""
"The maximum number of estimators at which boosting is terminated. In case"
" of perfect fit, the learning procedure is stopped early."
msgstr ""

#: :28
msgid "**learning_rate** : float, optional (default=1.)"
msgstr ""

#: :30
msgid ""
"Learning rate shrinks the contribution of each classifier by "
"``learning_rate``. There is a trade-off between ``learning_rate`` and "
"``n_estimators``."
msgstr ""

#: :34
msgid "**algorithm** : {'SAMME', 'SAMME.R'}, optional (default='SAMME.R')"
msgstr ""

#: :36
msgid ""
"If 'SAMME.R' then use the SAMME.R real boosting algorithm. "
"``base_estimator`` must support calculation of class probabilities. If "
"'SAMME' then use the SAMME discrete boosting algorithm. The SAMME.R "
"algorithm typically converges faster than SAMME, achieving a lower test "
"error with fewer boosting iterations."
msgstr ""

#: :42
msgid ""
"**random_state** : int, RandomState instance or None, optional "
"(default=None)"
msgstr ""

#: :44
msgid ""
"If int, random_state is the seed used by the random number generator; If "
"RandomState instance, random_state is the random number generator; If "
"None, the random number generator is the RandomState instance used by "
"`np.random`."
msgstr ""

#: :51
msgid "**estimators_** : list of classifiers"
msgstr ""

#: :53
msgid "The collection of fitted sub-estimators."
msgstr ""

#: :55
msgid "**classes_** : array of shape = [n_classes]"
msgstr ""

#: :57
msgid "The classes labels."
msgstr ""

#: :59
msgid "**n_classes_** : int"
msgstr ""

#: :61
msgid "The number of classes."
msgstr ""

#: :63
msgid "**estimator_weights_** : array of floats"
msgstr ""

#: :65
msgid "Weights for each estimator in the boosted ensemble."
msgstr ""

#: :67
msgid "**estimator_errors_** : array of floats"
msgstr ""

#: :69
msgid "Classification error for each estimator in the boosted ensemble."
msgstr ""

#: :72
msgid "**feature_importances_** : array of shape = [n_features]"
msgstr ""

#: :74
msgid "The feature importances if supported by the ``base_estimator``."
msgstr ""

#: :78
msgid ""
":obj:`AdaBoostRegressor`, :obj:`GradientBoostingClassifier`, "
":obj:`DecisionTreeClassifier`"
msgstr ""

#: :81
msgid "References"
msgstr ""

#: :82
msgid ""
"Y. Freund, R. Schapire, \"A Decision-Theoretic Generalization of on-Line "
"Learning and an Application to Boosting\", 1995."
msgstr ""

#: :85
msgid "Zhu, H. Zou, S. Rosset, T. Hastie, \"Multi-class AdaBoost\", 2009."
msgstr ""

#: :92
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`decision_function "
"<sklearn.ensemble.AdaBoostClassifier.decision_function>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Compute the decision function of ``X``."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit <sklearn.ensemble.AdaBoostClassifier.fit>`\\ (X, y[, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Build a boosted classifier from the training set (X, y)."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params <sklearn.ensemble.AdaBoostClassifier.get_params>`\\ "
"([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.AdaBoostClassifier.predict>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict classes for X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`predict_log_proba "
"<sklearn.ensemble.AdaBoostClassifier.predict_log_proba>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict class log-probabilities for X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`predict_proba "
"<sklearn.ensemble.AdaBoostClassifier.predict_proba>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict class probabilities for X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`score <sklearn.ensemble.AdaBoostClassifier.score>`\\ (X, y[, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns the mean accuracy on the given test data and labels."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.ensemble.AdaBoostClassifier.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`staged_decision_function "
"<sklearn.ensemble.AdaBoostClassifier.staged_decision_function>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Compute decision function of ``X`` for each boosting iteration."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`staged_predict "
"<sklearn.ensemble.AdaBoostClassifier.staged_predict>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Return staged predictions for X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`staged_predict_proba "
"<sklearn.ensemble.AdaBoostClassifier.staged_predict_proba>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`staged_score <sklearn.ensemble.AdaBoostClassifier.staged_score>`\\ "
"(X, y[, sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Return staged scores for X, y."
msgstr ""

#: :7 :10 :11 :16
msgid "**X** : {array-like, sparse matrix} of shape = [n_samples, n_features]"
msgstr ""

#: :9 :12 :13 :18
msgid ""
"The training input samples. Sparse matrix can be CSC, CSR, COO, DOK, or "
"LIL. DOK and LIL are converted to CSR."
msgstr ""

#: :14
msgid "**score** : array, shape = [n_samples, k]"
msgstr ""

#: :16 :19
msgid ""
"The decision function of the input samples. The order of outputs is the "
"same of that of the `classes_` attribute. Binary classification is a "
"special cases with ``k == 1``, otherwise ``k==n_classes``. For binary "
"classification, values closer to -1 or 1 mean more like the first or "
"second class in ``classes_``, respectively."
msgstr ""

#: :4
msgid "Return the feature importances (the higher, the more important the"
msgstr ""

#: :4
msgid "feature)."
msgstr ""

#: :8
msgid "**feature_importances_** : array, shape = [n_features]"
msgstr ""

#: :12
msgid "**y** : array-like of shape = [n_samples]"
msgstr ""

#: :14
msgid "The target values (class labels)."
msgstr ""

#: :16
msgid "**sample_weight** : array-like of shape = [n_samples], optional"
msgstr ""

#: :18
msgid ""
"Sample weights. If None, the sample weights are initialized to ``1 / "
"n_samples``."
msgstr ""

#: :23
msgid "**self** : object"
msgstr ""

#: :25
msgid "Returns self."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid ""
"The predicted class of an input sample is computed as the weighted mean "
"prediction of the classifiers in the ensemble."
msgstr ""

#: :17
msgid "**y** : array of shape = [n_samples]"
msgstr ""

#: :19 :22
msgid "The predicted classes."
msgstr ""

#: :5
msgid ""
"The predicted class log-probabilities of an input sample is computed as "
"the weighted mean predicted class log-probabilities of the classifiers in"
" the ensemble."
msgstr ""

#: :18
msgid "**p** : array of shape = [n_samples]"
msgstr ""

#: :20 :25
msgid ""
"The class probabilities of the input samples. The order of outputs is the"
" same of that of the `classes_` attribute."
msgstr ""

#: :5
msgid ""
"The predicted class probabilities of an input sample is computed as the "
"weighted mean predicted class probabilities of the classifiers in the "
"ensemble."
msgstr ""

#: :5
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: :11
msgid "**X** : array-like, shape = (n_samples, n_features)"
msgstr ""

#: :13
msgid "Test samples."
msgstr ""

#: :15
msgid "**y** : array-like, shape = (n_samples) or (n_samples, n_outputs)"
msgstr ""

#: :17
msgid "True labels for X."
msgstr ""

#: :19 :20
msgid "**sample_weight** : array-like, shape = [n_samples], optional"
msgstr ""

#: :21 :22
msgid "Sample weights."
msgstr ""

#: :25
msgid "**score** : float"
msgstr ""

#: :27
msgid "Mean accuracy of self.predict(X) wrt. y."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: :5
msgid ""
"This method allows monitoring (i.e. determine error on testing set) after"
" each boosting iteration."
msgstr ""

#: :17
msgid "**score** : generator of array, shape = [n_samples, k]"
msgstr ""

#: :8
msgid ""
"This generator method yields the ensemble prediction after each iteration"
" of boosting and therefore allows monitoring, such as to determine the "
"prediction on a test set after each boost."
msgstr ""

#: :14
msgid "**X** : array-like of shape = [n_samples, n_features]"
msgstr ""

#: :16
msgid "The input samples."
msgstr ""

#: :20
msgid "**y** : generator of array, shape = [n_samples]"
msgstr ""

#: :9
msgid ""
"This generator method yields the ensemble predicted class probabilities "
"after each iteration of boosting and therefore allows monitoring, such as"
" to determine the predicted class probabilities on a test set after each "
"boost."
msgstr ""

#: :23
msgid "**p** : generator of array, shape = [n_samples]"
msgstr ""

#: :5
msgid ""
"This generator method yields the ensemble score after each iteration of "
"boosting and therefore allows monitoring, such as to determine the score "
"on a test set after each boost."
msgstr ""

#: :16
msgid "**y** : array-like, shape = [n_samples]"
msgstr ""

#: :18
msgid "Labels for X."
msgstr ""

#: :26
msgid "**z** : float"
msgstr ""

#: ../../modules/generated/sklearn.ensemble.AdaBoostClassifier.examples:3
msgid "Examples using ``sklearn.ensemble.AdaBoostClassifier``"
msgstr ""

#: ../../modules/generated/sklearn.ensemble.AdaBoostClassifier.examples:25
msgid ":ref:`example_classification_plot_classifier_comparison.py`"
msgstr ""

#: ../../modules/generated/sklearn.ensemble.AdaBoostClassifier.examples:45
msgid ":ref:`example_ensemble_plot_adaboost_twoclass.py`"
msgstr ""

#: ../../modules/generated/sklearn.ensemble.AdaBoostClassifier.examples:65
msgid ":ref:`example_ensemble_plot_adaboost_hastie_10_2.py`"
msgstr ""

#: ../../modules/generated/sklearn.ensemble.AdaBoostClassifier.examples:85
msgid ":ref:`example_ensemble_plot_adaboost_multiclass.py`"
msgstr ""

#: ../../modules/generated/sklearn.ensemble.AdaBoostClassifier.examples:105
msgid ":ref:`example_ensemble_plot_forest_iris.py`"
msgstr ""

