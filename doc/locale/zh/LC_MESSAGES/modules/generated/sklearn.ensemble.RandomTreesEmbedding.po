# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst:2
msgid ":mod:`sklearn.ensemble`.RandomTreesEmbedding"
msgstr ""

#: :3
msgid "An ensemble of totally random trees."
msgstr ""

#: :5
msgid ""
"An unsupervised transformation of a dataset to a high-dimensional sparse "
"representation. A datapoint is coded according to which leaf of each tree"
" it is sorted into. Using a one-hot encoding of the leaves, this leads to"
" a binary coding with as many ones as there are trees in the forest."
msgstr ""

#: :11
msgid ""
"The dimensionality of the resulting representation is ``n_out <= "
"n_estimators * max_leaf_nodes``. If ``max_leaf_nodes == None``, the "
"number of leaf nodes is at most ``n_estimators * 2 ** max_depth``."
msgstr ""

#: :15
msgid "Read more in the :ref:`User Guide <random_trees_embedding>`."
msgstr ""

#: :19
msgid "**n_estimators** : int"
msgstr ""

#: :21
msgid "Number of trees in the forest."
msgstr ""

#: :23
msgid "**max_depth** : int"
msgstr ""

#: :25
msgid ""
"The maximum depth of each tree. If None, then nodes are expanded until "
"all leaves are pure or until all leaves contain less than "
"min_samples_split samples. Ignored if ``max_leaf_nodes`` is not None."
msgstr ""

#: :30
msgid "**min_samples_split** : integer, optional (default=2)"
msgstr ""

#: :32
msgid "The minimum number of samples required to split an internal node."
msgstr ""

#: :34
msgid "**min_samples_leaf** : integer, optional (default=1)"
msgstr ""

#: :36
msgid ""
"The minimum number of samples in newly created leaves.  A split is "
"discarded if after the split, one of the leaves would contain less then "
"``min_samples_leaf`` samples."
msgstr ""

#: :40
msgid "**min_weight_fraction_leaf** : float, optional (default=0.)"
msgstr ""

#: :42
msgid ""
"The minimum weighted fraction of the input samples required to be at a "
"leaf node."
msgstr ""

#: :45
msgid "**max_leaf_nodes** : int or None, optional (default=None)"
msgstr ""

#: :47
msgid ""
"Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are "
"defined as relative reduction in impurity. If None then unlimited number "
"of leaf nodes. If not None then ``max_depth`` will be ignored."
msgstr ""

#: :52
msgid "**sparse_output** : bool, optional (default=True)"
msgstr ""

#: :54
msgid ""
"Whether or not to return a sparse CSR matrix, as default behavior, or to "
"return a dense array compatible with dense pipeline operators."
msgstr ""

#: :57
msgid "**n_jobs** : integer, optional (default=1)"
msgstr ""

#: :59
msgid ""
"The number of jobs to run in parallel for both `fit` and `predict`. If "
"-1, then the number of jobs is set to the number of cores."
msgstr ""

#: :62
msgid ""
"**random_state** : int, RandomState instance or None, optional "
"(default=None)"
msgstr ""

#: :64
msgid ""
"If int, random_state is the seed used by the random number generator; If "
"RandomState instance, random_state is the random number generator; If "
"None, the random number generator is the RandomState instance used by "
"`np.random`."
msgstr ""

#: :69
msgid "**verbose** : int, optional (default=0)"
msgstr ""

#: :71
msgid "Controls the verbosity of the tree building process."
msgstr ""

#: :73
msgid "**warm_start** : bool, optional (default=False)"
msgstr ""

#: :75
msgid ""
"When set to ``True``, reuse the solution of the previous call to fit and "
"add more estimators to the ensemble, otherwise, just fit a whole new "
"forest."
msgstr ""

#: :81
msgid "**estimators_** : list of DecisionTreeClassifier"
msgstr ""

#: :83
msgid "The collection of fitted sub-estimators."
msgstr ""

#: :86
msgid "References"
msgstr ""

#: :87
msgid ""
"P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\", "
"Machine Learning, 63(1), 3-42, 2006."
msgstr ""

#: :89
msgid ""
"Moosmann, F. and Triggs, B. and Jurie, F.  \"Fast discriminative visual "
"codebooks using randomized clustering forests\" NIPS 2007"
msgstr ""

#: :98
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`apply <sklearn.ensemble.RandomTreesEmbedding.apply>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Apply trees in the forest to X, return leaf indices."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit <sklearn.ensemble.RandomTreesEmbedding.fit>`\\ (X[, y, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.ensemble.RandomTreesEmbedding.fit_transform>`\\ (X[, y, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit estimator and transform dataset."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params <sklearn.ensemble.RandomTreesEmbedding.get_params>`\\ "
"([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.ensemble.RandomTreesEmbedding.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`transform <sklearn.ensemble.RandomTreesEmbedding.transform>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Transform dataset."
msgstr ""

#: :7
msgid "**X** : array-like or sparse matrix, shape = [n_samples, n_features]"
msgstr ""

#: :9
msgid ""
"The input samples. Internally, it will be converted to "
"``dtype=np.float32`` and if a sparse matrix is provided to a sparse "
"``csr_matrix``."
msgstr ""

#: :15
msgid "**X_leaves** : array_like, shape = [n_samples, n_estimators]"
msgstr ""

#: :17
msgid ""
"For each datapoint x in X and for each tree in the forest, return the "
"index of the leaf x ends up in."
msgstr ""

#: :4
msgid "Return the feature importances (the higher, the more important the"
msgstr ""

#: :4
msgid "feature)."
msgstr ""

#: :8
msgid "**feature_importances_** : array, shape = [n_features]"
msgstr ""

#: :7
msgid "**X** : array-like or sparse matrix, shape=(n_samples, n_features)"
msgstr ""

#: :9
msgid ""
"The input samples. Use ``dtype=np.float32`` for maximum efficiency. "
"Sparse matrices are also supported, use sparse ``csc_matrix`` for maximum"
" efficiency."
msgstr ""

#: :15
msgid "**self** : object"
msgstr ""

#: :17
msgid "Returns self."
msgstr ""

#: :9
msgid ""
"Input data used to build forests. Use ``dtype=np.float32`` for maximum "
"efficiency."
msgstr ""

#: :14 :15
msgid "**X_transformed** : sparse matrix, shape=(n_samples, n_out)"
msgstr ""

#: :16 :17
msgid "Transformed dataset."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: :9
msgid ""
"Input data to be transformed. Use ``dtype=np.float32`` for maximum "
"efficiency. Sparse matrices are also supported, use sparse ``csr_matrix``"
" for maximum efficiency."
msgstr ""

#: ../../modules/generated/sklearn.ensemble.RandomTreesEmbedding.examples:3
msgid "Examples using ``sklearn.ensemble.RandomTreesEmbedding``"
msgstr ""

#: ../../modules/generated/sklearn.ensemble.RandomTreesEmbedding.examples:25
msgid ":ref:`example_ensemble_plot_random_forest_embedding.py`"
msgstr ""

#: ../../modules/generated/sklearn.ensemble.RandomTreesEmbedding.examples:45
msgid ":ref:`example_ensemble_plot_feature_transformation.py`"
msgstr ""

#: ../../modules/generated/sklearn.ensemble.RandomTreesEmbedding.examples:65
msgid ":ref:`example_manifold_plot_lle_digits.py`"
msgstr ""

