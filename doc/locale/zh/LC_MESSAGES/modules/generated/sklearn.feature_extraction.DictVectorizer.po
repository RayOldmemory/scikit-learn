# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.feature_extraction.DictVectorizer.rst:2
msgid ":mod:`sklearn.feature_extraction`.DictVectorizer"
msgstr ""

#: :3
msgid "Transforms lists of feature-value mappings to vectors."
msgstr ""

#: :5
msgid ""
"This transformer turns lists of mappings (dict-like objects) of feature "
"names to feature values into Numpy arrays or scipy.sparse matrices for "
"use with scikit-learn estimators."
msgstr ""

#: :9
msgid ""
"When feature values are strings, this transformer will do a binary one-"
"hot (aka one-of-K) coding: one boolean-valued feature is constructed for "
"each of the possible string values that the feature can take on. For "
"instance, a feature \"f\" that can take on the values \"ham\" and "
"\"spam\" will become two features in the output, one signifying "
"\"f=ham\", the other \"f=spam\"."
msgstr ""

#: :15
msgid ""
"Features that do not occur in a sample (mapping) will have a zero value "
"in the resulting array/matrix."
msgstr ""

#: :18
msgid "Read more in the :ref:`User Guide <dict_feature_extraction>`."
msgstr ""

#: :22
msgid "**dtype** : callable, optional"
msgstr ""

#: :24
msgid ""
"The type of feature values. Passed to Numpy array/scipy.sparse matrix "
"constructors as the dtype argument."
msgstr ""

#: :27
msgid "**separator: string, optional** :"
msgstr ""

#: :29
msgid "Separator string used when constructing new features for one-hot coding."
msgstr ""

#: :32
msgid "**sparse: boolean, optional.** :"
msgstr ""

#: :34
msgid "Whether transform should produce scipy.sparse matrices. True by default."
msgstr ""

#: :37
msgid "**sort: boolean, optional.** :"
msgstr ""

#: :39
msgid ""
"Whether ``feature_names_`` and ``vocabulary_`` should be sorted when "
"fitting. True by default."
msgstr ""

#: :44
msgid "**vocabulary_** : dict"
msgstr ""

#: :46
msgid "A dictionary mapping feature names to feature indices."
msgstr ""

#: :48
msgid "**feature_names_** : list"
msgstr ""

#: :50
msgid ""
"A list of length n_features containing the feature names (e.g., \"f=ham\""
" and \"f=spam\")."
msgstr ""

#: :56
msgid ":obj:`FeatureHasher`"
msgstr ""

#: :56
msgid "performs vectorization using only a hash function."
msgstr ""

#: :58
msgid ":obj:`sklearn.preprocessing.OneHotEncoder`"
msgstr ""

#: :59
msgid "handles nominal/categorical features encoded as columns of integers."
msgstr ""

#: :62 :23
msgid "Examples"
msgstr ""

#: :76
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`fit <sklearn.feature_extraction.DictVectorizer.fit>`\\ (X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Learn a list of feature name -> indices mappings."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.feature_extraction.DictVectorizer.fit_transform>`\\ (X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Learn a list of feature name -> indices mappings and transform X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_feature_names "
"<sklearn.feature_extraction.DictVectorizer.get_feature_names>`\\ ()"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns a list of feature names, ordered by their indices."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params "
"<sklearn.feature_extraction.DictVectorizer.get_params>`\\ ([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`inverse_transform "
"<sklearn.feature_extraction.DictVectorizer.inverse_transform>`\\ (X[, "
"dict_type])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Transform array or sparse matrix X back to feature mappings."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`restrict <sklearn.feature_extraction.DictVectorizer.restrict>`\\ "
"(support[, indices])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Restrict the features to those in support using feature selection."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params "
"<sklearn.feature_extraction.DictVectorizer.set_params>`\\ (\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`transform <sklearn.feature_extraction.DictVectorizer.transform>`\\ "
"(X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Transform feature->value dicts to array or sparse matrix."
msgstr ""

#: :7 :10
msgid "**X** : Mapping or iterable over Mappings"
msgstr ""

#: :9 :12
msgid ""
"Dict(s) or Mapping(s) from feature names (arbitrary Python objects) to "
"feature values (strings or convertible to dtype)."
msgstr ""

#: :12 :15
msgid "**y** : (ignored)"
msgstr ""

#: :16 :20 :12
msgid "**self** :"
msgstr ""

#: :5
msgid ""
"Like fit(X) followed by transform(X), but does not require materializing "
"X in memory."
msgstr ""

#: :19
msgid "**Xa** : {array, sparse matrix}"
msgstr ""

#: :21
msgid "Feature vectors; always 2-d."
msgstr ""

#: :5
msgid ""
"If one-of-K coding is applied to categorical features, this will include "
"the constructed feature names but not the original ones."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid ""
"X must have been produced by this DictVectorizer's transform or "
"fit_transform method; it may only have passed through transformers that "
"preserve the number of features and their order."
msgstr ""

#: :9
msgid ""
"In the case of one-hot/one-of-K coding, the constructed feature names and"
" values are returned rather than the original ones."
msgstr ""

#: :14
msgid "**X** : {array-like, sparse matrix}, shape = [n_samples, n_features]"
msgstr ""

#: :16
msgid "Sample matrix."
msgstr ""

#: :18
msgid "**dict_type** : callable, optional"
msgstr ""

#: :20
msgid ""
"Constructor for feature mappings. Must conform to the collections.Mapping"
" API."
msgstr ""

#: :25
msgid "**D** : list of dict_type objects, length = n_samples"
msgstr ""

#: :27
msgid "Feature mappings for the samples in X."
msgstr ""

#: :5
msgid "This function modifies the estimator in-place."
msgstr ""

#: :9
msgid "**support** : array-like"
msgstr ""

#: :11
msgid ""
"Boolean mask or list of indices (as returned by the get_support member of"
" feature selectors)."
msgstr ""

#: :14
msgid "**indices** : boolean, optional"
msgstr ""

#: :16
msgid "Whether support is a list of indices."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :5
msgid ""
"Named features not encountered during fit or fit_transform will be "
"silently ignored."
msgstr ""

#: :10
msgid "**X** : Mapping or iterable over Mappings, length = n_samples"
msgstr ""

#: ../../modules/generated/sklearn.feature_extraction.DictVectorizer.examples:3
msgid "Examples using ``sklearn.feature_extraction.DictVectorizer``"
msgstr ""

#: ../../modules/generated/sklearn.feature_extraction.DictVectorizer.examples:25
msgid ":ref:`example_hetero_feature_union.py`"
msgstr ""

#: ../../modules/generated/sklearn.feature_extraction.DictVectorizer.examples:45
msgid ":ref:`example_text_hashing_vs_dict_vectorizer.py`"
msgstr ""

