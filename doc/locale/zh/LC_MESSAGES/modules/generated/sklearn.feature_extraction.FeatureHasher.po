# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.feature_extraction.FeatureHasher.rst:2
msgid ":mod:`sklearn.feature_extraction`.FeatureHasher"
msgstr ""

#: :3
msgid "Implements feature hashing, aka the hashing trick."
msgstr ""

#: :5
msgid ""
"This class turns sequences of symbolic feature names (strings) into "
"scipy.sparse matrices, using a hash function to compute the matrix column"
" corresponding to a name. The hash function employed is the signed 32-bit"
" version of Murmurhash3."
msgstr ""

#: :10
msgid ""
"Feature names of type byte string are used as-is. Unicode strings are "
"converted to UTF-8 first, but no Unicode normalization is done. Feature "
"values must be (finite) numbers."
msgstr ""

#: :14
msgid ""
"This class is a low-memory alternative to DictVectorizer and "
"CountVectorizer, intended for large-scale (online) learning and "
"situations where memory is tight, e.g. when running prediction code on "
"embedded devices."
msgstr ""

#: :19
msgid "Read more in the :ref:`User Guide <feature_hashing>`."
msgstr ""

#: :23
msgid "**n_features** : integer, optional"
msgstr ""

#: :25
msgid ""
"The number of features (columns) in the output matrices. Small numbers of"
" features are likely to cause hash collisions, but large numbers will "
"cause larger coefficient dimensions in linear learners."
msgstr ""

#: :29
msgid "**dtype** : numpy type, optional, default np.float64"
msgstr ""

#: :31
msgid ""
"The type of feature values. Passed to scipy.sparse matrix constructors as"
" the dtype argument. Do not set this to bool, np.boolean or any unsigned "
"integer type."
msgstr ""

#: :35
msgid "**input_type** : string, optional, default \"dict\""
msgstr ""

#: :37
msgid ""
"Either \"dict\" (the default) to accept dictionaries over (feature_name, "
"value); \"pair\" to accept pairs of (feature_name, value); or \"string\" "
"to accept single strings. feature_name should be a string, while value "
"should be a number. In the case of \"string\", a value of 1 is implied. "
"The feature_name is hashed to find the appropriate column for the "
"feature. The value's sign might be flipped in the output (but see "
"non_negative, below)."
msgstr ""

#: :46
msgid "**non_negative** : boolean, optional, default False"
msgstr ""

#: :48
msgid ""
"Whether output matrices should contain non-negative values only; "
"effectively calls abs on the matrix prior to returning it. When True, "
"output values can be interpreted as frequencies. When False, output "
"values will have expected value zero."
msgstr ""

#: :56
msgid ":obj:`DictVectorizer`"
msgstr ""

#: :56
msgid "vectorizes string-valued features using a hash table."
msgstr ""

#: :58
msgid ":obj:`sklearn.preprocessing.OneHotEncoder`"
msgstr ""

#: :59
msgid "handles nominal/categorical features encoded as columns of integers."
msgstr ""

#: :62
msgid "Examples"
msgstr ""

#: :72
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`fit <sklearn.feature_extraction.FeatureHasher.fit>`\\ ([X, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "No-op."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.feature_extraction.FeatureHasher.fit_transform>`\\ (X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit to data, then transform it."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params <sklearn.feature_extraction.FeatureHasher.get_params>`\\"
" ([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.feature_extraction.FeatureHasher.set_params>`\\"
" (\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`transform <sklearn.feature_extraction.FeatureHasher.transform>`\\ "
"(raw_X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Transform a sequence of instances to a scipy.sparse matrix."
msgstr ""

#: :5
msgid ""
"This method doesn't do anything. It exists purely for compatibility with "
"the scikit-learn transformer API."
msgstr ""

#: :10
msgid "**self** : FeatureHasher"
msgstr ""

#: :5
msgid ""
"Fits transformer to X and y with optional parameters fit_params and "
"returns a transformed version of X."
msgstr ""

#: :10
msgid "**X** : numpy array of shape [n_samples, n_features]"
msgstr ""

#: :12
msgid "Training set."
msgstr ""

#: :14
msgid "**y** : numpy array of shape [n_samples]"
msgstr ""

#: :16
msgid "Target values."
msgstr ""

#: :20
msgid "**X_new** : numpy array of shape [n_samples, n_features_new]"
msgstr ""

#: :22
msgid "Transformed array."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: :7
msgid "**raw_X** : iterable over iterable over raw features, length = n_samples"
msgstr ""

#: :9
msgid ""
"Samples. Each sample must be iterable an (e.g., a list or tuple) "
"containing/generating feature names (and optionally values, see the "
"input_type constructor argument) which will be hashed. raw_X need not "
"support the len function, so it can be the result of a generator; "
"n_samples is determined on the fly."
msgstr ""

#: :15
msgid "**y** : (ignored)"
msgstr ""

#: :19
msgid "**X** : scipy.sparse matrix, shape = (n_samples, self.n_features)"
msgstr ""

#: :21
msgid "Feature matrix, for use with estimators or further transformers."
msgstr ""

#: ../../modules/generated/sklearn.feature_extraction.FeatureHasher.examples:3
msgid "Examples using ``sklearn.feature_extraction.FeatureHasher``"
msgstr ""

#: ../../modules/generated/sklearn.feature_extraction.FeatureHasher.examples:25
msgid ":ref:`example_text_hashing_vs_dict_vectorizer.py`"
msgstr ""

