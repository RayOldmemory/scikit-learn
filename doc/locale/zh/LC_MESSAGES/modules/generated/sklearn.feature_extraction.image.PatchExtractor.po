# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst:2
msgid ":mod:`sklearn.feature_extraction.image`.PatchExtractor"
msgstr ""

#: :3
msgid "Extracts patches from a collection of images"
msgstr ""

#: :5
msgid "Read more in the :ref:`User Guide <image_feature_extraction>`."
msgstr ""

#: :9
msgid "**patch_size** : tuple of ints (patch_height, patch_width)"
msgstr ""

#: :11
msgid "the dimensions of one patch"
msgstr ""

#: :13
msgid "**max_patches** : integer or float, optional default is None"
msgstr ""

#: :15
msgid ""
"The maximum number of patches per image to extract. If max_patches is a "
"float in (0, 1), it is taken to mean a proportion of the total number of "
"patches."
msgstr ""

#: :19
msgid "**random_state** : int or RandomState"
msgstr ""

#: :21
msgid "Pseudo number generator state used for random sampling."
msgstr ""

#: :24
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit <sklearn.feature_extraction.image.PatchExtractor.fit>`\\ (X[, "
"y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Do nothing and return the estimator unchanged"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params "
"<sklearn.feature_extraction.image.PatchExtractor.get_params>`\\ ([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params "
"<sklearn.feature_extraction.image.PatchExtractor.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`transform "
"<sklearn.feature_extraction.image.PatchExtractor.transform>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Transforms the image samples in X into a matrix of patch data."
msgstr ""

#: :5
msgid ""
"This method is just there to implement the usual API and hence work in "
"pipelines."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: :7
msgid "**X** : array, shape = (n_samples, image_height, image_width) or"
msgstr ""

#: :9
msgid ""
"(n_samples, image_height, image_width, n_channels) Array of images from "
"which to extract patches. For color images, the last dimension specifies "
"the channel: a RGB image would have `n_channels=3`."
msgstr ""

#: :16
msgid "**patches: array, shape = (n_patches, patch_height, patch_width) or** :"
msgstr ""

#: :18
msgid ""
"(n_patches, patch_height, patch_width, n_channels) The collection of "
"patches extracted from the images, where `n_patches` is either `n_samples"
" * max_patches` or the total number of patches that can be extracted."
msgstr ""

