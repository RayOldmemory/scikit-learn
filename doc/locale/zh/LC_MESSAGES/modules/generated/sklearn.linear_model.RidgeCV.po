# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.linear_model.RidgeCV.rst:2
msgid ":mod:`sklearn.linear_model`.RidgeCV"
msgstr ""

#: :3
msgid "Ridge regression with built-in cross-validation."
msgstr ""

#: :5
msgid ""
"By default, it performs Generalized Cross-Validation, which is a form of "
"efficient Leave-One-Out cross-validation."
msgstr ""

#: :8
msgid "Read more in the :ref:`User Guide <ridge_regression>`."
msgstr ""

#: :12
msgid "**alphas** : numpy array of shape [n_alphas]"
msgstr ""

#: :14
msgid ""
"Array of alpha values to try. Small positive values of alpha improve the "
"conditioning of the problem and reduce the variance of the estimates. "
"Alpha corresponds to ``C^-1`` in other linear models such as "
"LogisticRegression or LinearSVC."
msgstr ""

#: :20
msgid "**fit_intercept** : boolean"
msgstr ""

#: :22
msgid ""
"Whether to calculate the intercept for this model. If set to false, no "
"intercept will be used in calculations (e.g. data is expected to be "
"already centered)."
msgstr ""

#: :26
msgid "**normalize** : boolean, optional, default False"
msgstr ""

#: :28
msgid "If True, the regressors X will be normalized before regression."
msgstr ""

#: :30
msgid "**scoring** : string, callable or None, optional, default: None"
msgstr ""

#: :32
msgid ""
"A string (see model evaluation documentation) or a scorer callable object"
" / function with signature ``scorer(estimator, X, y)``."
msgstr ""

#: :36
msgid "**cv** : int, cross-validation generator or an iterable, optional"
msgstr ""

#: :38
msgid ""
"Determines the cross-validation splitting strategy. Possible inputs for "
"cv are:"
msgstr ""

#: :41
msgid "None, to use the efficient Leave-One-Out cross-validation"
msgstr ""

#: :42
msgid "integer, to specify the number of folds."
msgstr ""

#: :43
msgid "An object to be used as a cross-validation generator."
msgstr ""

#: :44
msgid "An iterable yielding train/test splits."
msgstr ""

#: :46
msgid ""
"For integer/None inputs, if ``y`` is binary or multiclass, "
":class:`StratifiedKFold` used, else, :class:`KFold` is used."
msgstr ""

#: :49
msgid ""
"Refer :ref:`User Guide <cross_validation>` for the various cross-"
"validation strategies that can be used here."
msgstr ""

#: :52
msgid "**gcv_mode** : {None, 'auto', 'svd', eigen'}, optional"
msgstr ""

#: :54
msgid ""
"Flag indicating which strategy to use when performing Generalized Cross-"
"Validation. Options are::"
msgstr ""

#: :63
msgid ""
"The 'auto' mode is the default and is intended to pick the cheaper option"
" of the two depending upon the shape and format of the training data."
msgstr ""

#: :67
msgid "**store_cv_values** : boolean, default=False"
msgstr ""

#: :69
msgid ""
"Flag indicating if the cross-validation values corresponding to each "
"alpha should be stored in the `cv_values_` attribute (see below). This "
"flag is only compatible with `cv=None` (i.e. using Generalized Cross-"
"Validation)."
msgstr ""

#: :76
msgid ""
"**cv_values_** : array, shape = [n_samples, n_alphas] or         shape = "
"[n_samples, n_targets, n_alphas], optional"
msgstr ""

#: :78
msgid ""
"Cross-validation values for each alpha (if `store_cv_values=True` and"
"         `cv=None`). After `fit()` has been called, this attribute will"
"         contain the mean squared errors (by default) or the values of "
"the         `{loss,score}_func` function (if provided in the "
"constructor)."
msgstr ""

#: :80
msgid "**coef_** : array, shape = [n_features] or [n_targets, n_features]"
msgstr ""

#: :82
msgid "Weight vector(s)."
msgstr ""

#: :84
msgid "**intercept_** : float | array, shape = (n_targets,)"
msgstr ""

#: :86
msgid ""
"Independent term in decision function. Set to 0.0 if ``fit_intercept = "
"False``."
msgstr ""

#: :89
msgid "**alpha_** : float"
msgstr ""

#: :91
msgid "Estimated regularization parameter."
msgstr ""

#: :96
msgid ":obj:`Ridge`"
msgstr ""

#: :96
msgid "Ridge regression"
msgstr ""

#: :99
msgid ":obj:`RidgeClassifier`"
msgstr ""

#: :99
msgid "Ridge classifier"
msgstr ""

#: :101
msgid ":obj:`RidgeClassifierCV`"
msgstr ""

#: :102
msgid "Ridge classifier with built-in cross validation"
msgstr ""

#: :105
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`decision_function "
"<sklearn.linear_model.RidgeCV.decision_function>`\\ (\\*args, "
"\\*\\*kwargs)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "DEPRECATED:  and will be removed in 0.19."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.RidgeCV.fit>`\\ (X, y[, sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit Ridge regression model"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.RidgeCV.get_params>`\\ ([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.RidgeCV.predict>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict using the linear model"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`score <sklearn.linear_model.RidgeCV.score>`\\ (X, y[, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns the coefficient of determination R^2 of the prediction."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.linear_model.RidgeCV.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: :5
msgid "Decision function of the linear model."
msgstr ""

#: :9 :7
msgid "**X** : {array-like, sparse matrix}, shape = (n_samples, n_features)"
msgstr ""

#: :11 :9
msgid "Samples."
msgstr ""

#: :15 :13
msgid "**C** : array, shape = (n_samples,)"
msgstr ""

#: :17 :15
msgid "Returns predicted values."
msgstr ""

#: :7
msgid "**X** : array-like, shape = [n_samples, n_features]"
msgstr ""

#: :9
msgid "Training data"
msgstr ""

#: :11
msgid "**y** : array-like, shape = [n_samples] or [n_samples, n_targets]"
msgstr ""

#: :13
msgid "Target values"
msgstr ""

#: :15
msgid "**sample_weight** : float or array-like of shape [n_samples]"
msgstr ""

#: :17
msgid "Sample weight"
msgstr ""

#: :21
msgid "**self** : Returns self."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid ""
"The coefficient R^2 is defined as (1 - u/v), where u is the regression "
"sum of squares ((y_true - y_pred) ** 2).sum() and v is the residual sum "
"of squares ((y_true - y_true.mean()) ** 2).sum(). Best possible score is "
"1.0 and it can be negative (because the model can be arbitrarily worse). "
"A constant model that always predicts the expected value of y, "
"disregarding the input features, would get a R^2 score of 0.0."
msgstr ""

#: :15
msgid "**X** : array-like, shape = (n_samples, n_features)"
msgstr ""

#: :17
msgid "Test samples."
msgstr ""

#: :19
msgid "**y** : array-like, shape = (n_samples) or (n_samples, n_outputs)"
msgstr ""

#: :21
msgid "True values for X."
msgstr ""

#: :23
msgid "**sample_weight** : array-like, shape = [n_samples], optional"
msgstr ""

#: :25
msgid "Sample weights."
msgstr ""

#: :29
msgid "**score** : float"
msgstr ""

#: :31
msgid "R^2 of self.predict(X) wrt. y."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: ../../modules/generated/sklearn.linear_model.RidgeCV.examples:3
msgid "Examples using ``sklearn.linear_model.RidgeCV``"
msgstr ""

#: ../../modules/generated/sklearn.linear_model.RidgeCV.examples:25
msgid ":ref:`example_plot_multioutput_face_completion.py`"
msgstr ""

