# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.linear_model.RidgeClassifier.rst:2
msgid ":mod:`sklearn.linear_model`.RidgeClassifier"
msgstr ""

#: :3
msgid "Classifier using Ridge regression."
msgstr ""

#: :5
msgid "Read more in the :ref:`User Guide <ridge_regression>`."
msgstr ""

#: :9
msgid "**alpha** : float"
msgstr ""

#: :11
msgid ""
"Small positive values of alpha improve the conditioning of the problem "
"and reduce the variance of the estimates.  Alpha corresponds to ``C^-1`` "
"in other linear models such as LogisticRegression or LinearSVC."
msgstr ""

#: :16
msgid "**class_weight** : dict or 'balanced', optional"
msgstr ""

#: :18
msgid ""
"Weights associated with classes in the form ``{class_label: weight}``. If"
" not given, all classes are supposed to have weight one."
msgstr ""

#: :21
msgid ""
"The \"balanced\" mode uses the values of y to automatically adjust "
"weights inversely proportional to class frequencies in the input data as "
"``n_samples / (n_classes * np.bincount(y))``"
msgstr ""

#: :25
msgid "**copy_X** : boolean, optional, default True"
msgstr ""

#: :27
msgid "If True, X will be copied; else, it may be overwritten."
msgstr ""

#: :29
msgid "**fit_intercept** : boolean"
msgstr ""

#: :31
msgid ""
"Whether to calculate the intercept for this model. If set to false, no "
"intercept will be used in calculations (e.g. data is expected to be "
"already centered)."
msgstr ""

#: :35
msgid "**max_iter** : int, optional"
msgstr ""

#: :37
msgid ""
"Maximum number of iterations for conjugate gradient solver. The default "
"value is determined by scipy.sparse.linalg."
msgstr ""

#: :40
msgid "**normalize** : boolean, optional, default False"
msgstr ""

#: :42
msgid "If True, the regressors X will be normalized before regression."
msgstr ""

#: :44
msgid "**solver** : {'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag'}"
msgstr ""

#: :46
msgid "Solver to use in the computational routines:"
msgstr ""

#: :48
msgid "'auto' chooses the solver automatically based on the type of data."
msgstr ""

#: :50
msgid ""
"'svd' uses a Singular Value Decomposition of X to compute the Ridge "
"coefficients. More stable for singular matrices than 'cholesky'."
msgstr ""

#: :54
msgid ""
"'cholesky' uses the standard scipy.linalg.solve function to obtain a "
"closed-form solution."
msgstr ""

#: :57
msgid ""
"'sparse_cg' uses the conjugate gradient solver as found in "
"scipy.sparse.linalg.cg. As an iterative algorithm, this solver is more "
"appropriate than 'cholesky' for large-scale data (possibility to set "
"`tol` and `max_iter`)."
msgstr ""

#: :62
msgid ""
"'lsqr' uses the dedicated regularized least-squares routine "
"scipy.sparse.linalg.lsqr. It is the fatest but may not be available in "
"old scipy versions. It also uses an iterative procedure."
msgstr ""

#: :66
msgid ""
"'sag' uses a Stochastic Average Gradient descent. It also uses an "
"iterative procedure, and is faster than other solvers when both n_samples"
" and n_features are large."
msgstr ""

#: :70
msgid "Stochastic Average Gradient descent solver."
msgstr ""

#: :73
msgid "**tol** : float"
msgstr ""

#: :75
msgid "Precision of the solution."
msgstr ""

#: :77
msgid "**random_state** : int seed, RandomState instance, or None (default)"
msgstr ""

#: :79
msgid ""
"The seed of the pseudo random number generator to use when shuffling the "
"data. Used in 'sag' solver."
msgstr ""

#: :84
msgid "**coef_** : array, shape (n_features,) or (n_classes, n_features)"
msgstr ""

#: :86
msgid "Weight vector(s)."
msgstr ""

#: :88
msgid "**intercept_** : float | array, shape = (n_targets,)"
msgstr ""

#: :90
msgid ""
"Independent term in decision function. Set to 0.0 if ``fit_intercept = "
"False``."
msgstr ""

#: :93
msgid "**n_iter_** : array or None, shape (n_targets,)"
msgstr ""

#: :95
msgid ""
"Actual number of iterations for each target. Available only for sag and "
"lsqr solvers. Other solvers will return None."
msgstr ""

#: :100
msgid ":obj:`Ridge`, :obj:`RidgeClassifierCV`"
msgstr ""

#: :103
msgid "Notes"
msgstr ""

#: :104
msgid ""
"For multi-class classification, n_class classifiers are trained in a one-"
"versus-all approach. Concretely, this is implemented by taking advantage "
"of the multi-variate response support in Ridge."
msgstr ""

#: :109
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`decision_function "
"<sklearn.linear_model.RidgeClassifier.decision_function>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict confidence scores for samples."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit <sklearn.linear_model.RidgeClassifier.fit>`\\ (X, y[, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit Ridge regression model."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params <sklearn.linear_model.RidgeClassifier.get_params>`\\ "
"([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.RidgeClassifier.predict>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict class labels for samples in X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`score <sklearn.linear_model.RidgeClassifier.score>`\\ (X, y[, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns the mean accuracy on the given test data and labels."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.linear_model.RidgeClassifier.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: :5
msgid ""
"The confidence score for a sample is the signed distance of that sample "
"to the hyperplane."
msgstr ""

#: :10
msgid "**X** : {array-like, sparse matrix}, shape = (n_samples, n_features)"
msgstr ""

#: :12 :9
msgid "Samples."
msgstr ""

#: :16
msgid ""
"**array, shape=(n_samples,) if n_classes == 2 else (n_samples, "
"n_classes)** :"
msgstr ""

#: :18
msgid ""
"Confidence scores per (sample, class) combination. In the binary case, "
"confidence score for self.classes_[1] where >0 means this class would be "
"predicted."
msgstr ""

#: :7
msgid "**X** : {array-like, sparse matrix}, shape = [n_samples,n_features]"
msgstr ""

#: :9
msgid "Training data"
msgstr ""

#: :11
msgid "**y** : array-like, shape = [n_samples]"
msgstr ""

#: :13
msgid "Target values"
msgstr ""

#: :15
msgid "**sample_weight** : float or numpy array of shape (n_samples,)"
msgstr ""

#: :17
msgid "Sample weight."
msgstr ""

#: :19
msgid "*sample_weight* support to Classifier."
msgstr ""

#: :24
msgid "**self** : returns an instance of self."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :7
msgid "**X** : {array-like, sparse matrix}, shape = [n_samples, n_features]"
msgstr ""

#: :13
msgid "**C** : array, shape = [n_samples]"
msgstr ""

#: :15
msgid "Predicted class label per sample."
msgstr ""

#: :5
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: :11
msgid "**X** : array-like, shape = (n_samples, n_features)"
msgstr ""

#: :13
msgid "Test samples."
msgstr ""

#: :15
msgid "**y** : array-like, shape = (n_samples) or (n_samples, n_outputs)"
msgstr ""

#: :17
msgid "True labels for X."
msgstr ""

#: :19
msgid "**sample_weight** : array-like, shape = [n_samples], optional"
msgstr ""

#: :21
msgid "Sample weights."
msgstr ""

#: :25
msgid "**score** : float"
msgstr ""

#: :27
msgid "Mean accuracy of self.predict(X) wrt. y."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: ../../modules/generated/sklearn.linear_model.RidgeClassifier.examples:3
msgid "Examples using ``sklearn.linear_model.RidgeClassifier``"
msgstr ""

#: ../../modules/generated/sklearn.linear_model.RidgeClassifier.examples:25
msgid ":ref:`example_text_document_classification_20newsgroups.py`"
msgstr ""

