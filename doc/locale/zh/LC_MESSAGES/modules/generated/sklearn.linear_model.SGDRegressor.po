# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.linear_model.SGDRegressor.rst:2
msgid ":mod:`sklearn.linear_model`.SGDRegressor"
msgstr ""

#: :3
msgid "Linear model fitted by minimizing a regularized empirical loss with SGD"
msgstr ""

#: :5
msgid ""
"SGD stands for Stochastic Gradient Descent: the gradient of the loss is "
"estimated each sample at a time and the model is updated along the way "
"with a decreasing strength schedule (aka learning rate)."
msgstr ""

#: :9
msgid ""
"The regularizer is a penalty added to the loss function that shrinks "
"model parameters towards the zero vector using either the squared "
"euclidean norm L2 or the absolute norm L1 or a combination of both "
"(Elastic Net). If the parameter update crosses the 0.0 value because of "
"the regularizer, the update is truncated to 0.0 to allow for learning "
"sparse models and achieve online feature selection."
msgstr ""

#: :16
msgid ""
"This implementation works with data represented as dense numpy arrays of "
"floating point values for the features."
msgstr ""

#: :19
msgid "Read more in the :ref:`User Guide <sgd>`."
msgstr ""

#: :23
msgid ""
"**loss** : str, 'squared_loss', 'huber', 'epsilon_insensitive',"
"                 or 'squared_epsilon_insensitive'"
msgstr ""

#: :25
msgid ""
"The loss function to be used. Defaults to 'squared_loss' which refers to "
"the ordinary least squares fit. 'huber' modifies 'squared_loss' to focus "
"less on getting outliers correct by switching from squared to linear loss"
" past a distance of epsilon. 'epsilon_insensitive' ignores errors less "
"than epsilon and is linear past that; this is the loss function used in "
"SVR. 'squared_epsilon_insensitive' is the same but becomes squared loss "
"past a tolerance of epsilon."
msgstr ""

#: :33
msgid "**penalty** : str, 'none', 'l2', 'l1', or 'elasticnet'"
msgstr ""

#: :35
msgid ""
"The penalty (aka regularization term) to be used. Defaults to 'l2' which "
"is the standard regularizer for linear SVM models. 'l1' and 'elasticnet' "
"might bring sparsity to the model (feature selection) not achievable with"
" 'l2'."
msgstr ""

#: :40
msgid "**alpha** : float"
msgstr ""

#: :42
msgid ""
"Constant that multiplies the regularization term. Defaults to 0.0001 Also"
" used to compute learning_rate when set to 'optimal'."
msgstr ""

#: :45
msgid "**l1_ratio** : float"
msgstr ""

#: :47
msgid ""
"The Elastic Net mixing parameter, with 0 <= l1_ratio <= 1. l1_ratio=0 "
"corresponds to L2 penalty, l1_ratio=1 to L1. Defaults to 0.15."
msgstr ""

#: :51
msgid "**fit_intercept** : bool"
msgstr ""

#: :53
msgid ""
"Whether the intercept should be estimated or not. If False, the data is "
"assumed to be already centered. Defaults to True."
msgstr ""

#: :56
msgid "**n_iter** : int, optional"
msgstr ""

#: :58
msgid ""
"The number of passes over the training data (aka epochs). The number of "
"iterations is set to 1 if using partial_fit. Defaults to 5."
msgstr ""

#: :62
msgid "**shuffle** : bool, optional"
msgstr ""

#: :64
msgid ""
"Whether or not the training data should be shuffled after each epoch. "
"Defaults to True."
msgstr ""

#: :67
msgid "**random_state** : int seed, RandomState instance, or None (default)"
msgstr ""

#: :69
msgid ""
"The seed of the pseudo random number generator to use when shuffling the "
"data."
msgstr ""

#: :72
msgid "**verbose** : integer, optional"
msgstr ""

#: :74
msgid "The verbosity level."
msgstr ""

#: :76
msgid "**epsilon** : float"
msgstr ""

#: :78
msgid ""
"Epsilon in the epsilon-insensitive loss functions; only if `loss` is "
"'huber', 'epsilon_insensitive', or 'squared_epsilon_insensitive'. For "
"'huber', determines the threshold at which it becomes less important to "
"get the prediction exactly right. For epsilon-insensitive, any "
"differences between the current prediction and the correct label are "
"ignored if they are less than this threshold."
msgstr ""

#: :85
msgid "**learning_rate** : string, optional"
msgstr ""

#: :87
msgid ""
"The learning rate: constant: eta = eta0 optimal: eta = 1.0/(alpha * t) "
"invscaling: eta = eta0 / pow(t, power_t) [default]"
msgstr ""

#: :92
msgid "**eta0** : double, optional"
msgstr ""

#: :94
msgid "The initial learning rate [default 0.01]."
msgstr ""

#: :96
msgid "**power_t** : double, optional"
msgstr ""

#: :98
msgid "The exponent for inverse scaling learning rate [default 0.25]."
msgstr ""

#: :100
msgid "**warm_start** : bool, optional"
msgstr ""

#: :102
msgid ""
"When set to True, reuse the solution of the previous call to fit as "
"initialization, otherwise, just erase the previous solution."
msgstr ""

#: :105
msgid "**average** : bool or int, optional"
msgstr ""

#: :107
msgid ""
"When set to True, computes the averaged SGD weights and stores the result"
" in the ``coef_`` attribute. If set to an int greater than 1, averaging "
"will begin once the total number of samples seen reaches average. So "
"``average=10 will`` begin averaging after seeing 10 samples."
msgstr ""

#: :115
msgid "**coef_** : array, shape (n_features,)"
msgstr ""

#: :117
msgid "Weights assigned to the features."
msgstr ""

#: :119
msgid "**intercept_** : array, shape (1,)"
msgstr ""

#: :121
msgid "The intercept term."
msgstr ""

#: :123
msgid "**average_coef_** : array, shape (n_features,)"
msgstr ""

#: :125
msgid "Averaged weights assigned to the features."
msgstr ""

#: :127
msgid "**average_intercept_** : array, shape (1,)"
msgstr ""

#: :129
msgid "The averaged intercept term."
msgstr ""

#: :133
msgid ":obj:`Ridge`, :obj:`ElasticNet`, :obj:`Lasso`, :obj:`SVR`"
msgstr ""

#: :136
msgid "Examples"
msgstr ""

#: :152
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`decision_function "
"<sklearn.linear_model.SGDRegressor.decision_function>`\\ (\\*args, "
"\\*\\*kwargs)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "DEPRECATED:  and will be removed in 0.19."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`densify <sklearn.linear_model.SGDRegressor.densify>`\\ ()"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Convert coefficient matrix to dense array format."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit <sklearn.linear_model.SGDRegressor.fit>`\\ (X, y[, coef_init, "
"intercept_init, ...])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit linear model with Stochastic Gradient Descent."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit_transform <sklearn.linear_model.SGDRegressor.fit_transform>`\\ "
"(X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit to data, then transform it."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params <sklearn.linear_model.SGDRegressor.get_params>`\\ "
"([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`partial_fit <sklearn.linear_model.SGDRegressor.partial_fit>`\\ (X, "
"y[, sample_weight])"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.SGDRegressor.predict>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :5 :3
msgid "Predict using the linear model"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`score <sklearn.linear_model.SGDRegressor.score>`\\ (X, y[, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns the coefficient of determination R^2 of the prediction."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.linear_model.SGDRegressor.set_params>`\\ "
"(\\*args, \\*\\*kwargs)"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`sparsify <sklearn.linear_model.SGDRegressor.sparsify>`\\ ()"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Convert coefficient matrix to sparse format."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`transform <sklearn.linear_model.SGDRegressor.transform>`\\ "
"(\\*args, \\*\\*kwargs)"
msgstr ""

#: ../../<autosummary>:1
msgid ""
"DEPRECATED: Support to use estimators as feature selectors will be "
"removed in version 0.19."
msgstr ""

#: :9 :7
msgid "**X** : {array-like, sparse matrix}, shape (n_samples, n_features)"
msgstr ""

#: :13 :11
msgid "**array, shape (n_samples,)** :"
msgstr ""

#: :15 :13
msgid "Predicted target values per element in X."
msgstr ""

#: :5
msgid ""
"Converts the ``coef_`` member (back) to a numpy.ndarray. This is the "
"default format of ``coef_`` and is required for fitting, so calling this "
"method is only required on models that have previously been sparsified; "
"otherwise, it is a no-op."
msgstr ""

#: :12 :13
msgid "**self: estimator** :"
msgstr ""

#: :9
msgid "Training data"
msgstr ""

#: :11
msgid "**y** : numpy array, shape (n_samples,)"
msgstr ""

#: :13
msgid "Target values"
msgstr ""

#: :15
msgid "**coef_init** : array, shape (n_features,)"
msgstr ""

#: :17
msgid "The initial coefficients to warm-start the optimization."
msgstr ""

#: :19
msgid "**intercept_init** : array, shape (1,)"
msgstr ""

#: :21
msgid "The initial intercept to warm-start the optimization."
msgstr ""

#: :23 :15
msgid "**sample_weight** : array-like, shape (n_samples,), optional"
msgstr ""

#: :25
msgid "Weights applied to individual samples (1. for unweighted)."
msgstr ""

#: :29 :22
msgid "**self** : returns an instance of self."
msgstr ""

#: :5
msgid ""
"Fits transformer to X and y with optional parameters fit_params and "
"returns a transformed version of X."
msgstr ""

#: :10
msgid "**X** : numpy array of shape [n_samples, n_features]"
msgstr ""

#: :12
msgid "Training set."
msgstr ""

#: :14
msgid "**y** : numpy array of shape [n_samples]"
msgstr ""

#: :16
msgid "Target values."
msgstr ""

#: :20
msgid "**X_new** : numpy array of shape [n_samples, n_features_new]"
msgstr ""

#: :22
msgid "Transformed array."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :9
msgid "Subset of training data"
msgstr ""

#: :11
msgid "**y** : numpy array of shape (n_samples,)"
msgstr ""

#: :13
msgid "Subset of target values"
msgstr ""

#: :17
msgid ""
"Weights applied to individual samples. If not provided, uniform weights "
"are assumed."
msgstr ""

#: :5
msgid ""
"The coefficient R^2 is defined as (1 - u/v), where u is the regression "
"sum of squares ((y_true - y_pred) ** 2).sum() and v is the residual sum "
"of squares ((y_true - y_true.mean()) ** 2).sum(). Best possible score is "
"1.0 and it can be negative (because the model can be arbitrarily worse). "
"A constant model that always predicts the expected value of y, "
"disregarding the input features, would get a R^2 score of 0.0."
msgstr ""

#: :15
msgid "**X** : array-like, shape = (n_samples, n_features)"
msgstr ""

#: :17
msgid "Test samples."
msgstr ""

#: :19
msgid "**y** : array-like, shape = (n_samples) or (n_samples, n_outputs)"
msgstr ""

#: :21
msgid "True values for X."
msgstr ""

#: :23
msgid "**sample_weight** : array-like, shape = [n_samples], optional"
msgstr ""

#: :25
msgid "Sample weights."
msgstr ""

#: :29
msgid "**score** : float"
msgstr ""

#: :31
msgid "R^2 of self.predict(X) wrt. y."
msgstr ""

#: :5
msgid ""
"Converts the ``coef_`` member to a scipy.sparse matrix, which for "
"L1-regularized models can be much more memory- and storage-efficient than"
" the usual numpy.ndarray representation."
msgstr ""

#: :9
msgid "The ``intercept_`` member is not converted."
msgstr ""

#: :16
msgid "Notes"
msgstr ""

#: :17
#, python-format
msgid ""
"For non-sparse models, i.e. when there are not many zeros in ``coef_``, "
"this may actually *increase* memory usage, so use this method with care. "
"A rule of thumb is that the number of zero elements, which can be "
"computed with ``(coef_ == 0).sum()``, must be more than 50% for this to "
"provide significant benefits."
msgstr ""

#: :23
msgid ""
"After calling this method, further fitting with the partial_fit method "
"(if any) will not work until you call densify."
msgstr ""

#: :3
msgid ""
"DEPRECATED: Support to use estimators as feature selectors will be "
"removed in version 0.19. Use SelectFromModel instead."
msgstr ""

#: :5
msgid "Reduce X to its most important features."
msgstr ""

#: :7
msgid ""
"Uses ``coef_`` or ``feature_importances_`` to determine the most "
"important features.  For models with a ``coef_`` for each class, the "
"absolute sum over the classes is used."
msgstr ""

#: :13
msgid "**X** : array or scipy sparse matrix of shape [n_samples, n_features]"
msgstr ""

#: :15
msgid "The input samples."
msgstr ""

#: :24
msgid "threshold"
msgstr ""

#: :23
msgid "string, float or None, optional (default=None)"
msgstr ""

#: :18
msgid ""
"The threshold value to use for feature selection. Features whose "
"importance is greater or equal are kept while the others are discarded. "
"If \"median\" (resp. \"mean\"), then the threshold value is the median "
"(resp. the mean) of the feature importances. A scaling factor (e.g., "
"\"1.25*mean\") may also be used. If None and if available, the object "
"attribute ``threshold`` is used. Otherwise, \"mean\" is used by default."
msgstr ""

#: :28
msgid "**X_r** : array of shape [n_samples, n_selected_features]"
msgstr ""

#: :30
msgid "The input samples with only the selected features."
msgstr ""

#: ../../modules/generated/sklearn.linear_model.SGDRegressor.examples:3
msgid "Examples using ``sklearn.linear_model.SGDRegressor``"
msgstr ""

#: ../../modules/generated/sklearn.linear_model.SGDRegressor.examples:25
msgid ":ref:`example_applications_plot_prediction_latency.py`"
msgstr ""

