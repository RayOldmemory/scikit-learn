# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.neighbors.BallTree.rst:2
msgid ":mod:`sklearn.neighbors`.BallTree"
msgstr ""

#: :3
msgid "BallTree for fast generalized N-point problems"
msgstr ""

#: :5
msgid "BallTree(X, leaf_size=40, metric='minkowski', \\**kwargs)"
msgstr ""

#: :9
msgid "**X** : array-like, shape = [n_samples, n_features]"
msgstr ""

#: :11
msgid ""
"n_samples is the number of points in the data set, and n_features is the "
"dimension of the parameter space. Note: if X is a C-contiguous array of "
"doubles then data will not be copied. Otherwise, an internal copy will be"
" made."
msgstr ""

#: :16
msgid "**leaf_size** : positive integer (default = 20)"
msgstr ""

#: :18
msgid ""
"Number of points at which to switch to brute-force. Changing leaf_size "
"will not affect the results of a query, but can significantly impact the "
"speed of a query and the memory required to store the constructed tree.  "
"The amount of memory needed to store the tree scales as approximately "
"n_samples / leaf_size. For a specified ``leaf_size``, a leaf node is "
"guaranteed to satisfy ``leaf_size <= n_points <= 2 * leaf_size``, except "
"in the case that ``n_samples < leaf_size``."
msgstr ""

#: :27
msgid "**metric** : string or DistanceMetric object"
msgstr ""

#: :29
msgid ""
"the distance metric to use for the tree.  Default='minkowski' with p=2 "
"(that is, a euclidean metric). See the documentation of the "
"DistanceMetric class for a list of available metrics. "
"ball_tree.valid_metrics gives a list of the metrics which are valid for "
"BallTree."
msgstr ""

#: :35
msgid "**Additional keywords are passed to the distance metric class.** :"
msgstr ""

#: :39
msgid "**data** : np.ndarray"
msgstr ""

#: :41
msgid "The training data"
msgstr ""

#: :44 :53 :55 :67 :30
msgid "Examples"
msgstr ""

#: :45 :56
msgid "Query for k-nearest neighbors"
msgstr ""

#: :58
msgid ""
"Pickle and Unpickle a tree.  Note that the state of the tree is saved in "
"the pickle operation: the tree needs not be rebuilt upon unpickling."
msgstr ""

#: :74
msgid "Query for neighbors within a given radius"
msgstr ""

#: :86 :54
msgid "Compute a gaussian kernel density estimate:"
msgstr ""

#: :95
msgid "Compute a two-point auto-correlation function"
msgstr ""

#: :106
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`get_arrays <sklearn.neighbors.BallTree.get_arrays>`\\"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`get_n_calls <sklearn.neighbors.BallTree.get_n_calls>`\\"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`get_tree_stats <sklearn.neighbors.BallTree.get_tree_stats>`\\"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`kernel_density <sklearn.neighbors.BallTree.kernel_density>`\\ "
"(self, X, h[, kernel, atol, ...])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid ""
"Compute the kernel density estimate at points X with the given kernel, "
"using the distance metric specified at tree creation."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`query <sklearn.neighbors.BallTree.query>`\\ (X[, k, "
"return_distance, dualtree, ...])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "query the tree for the k nearest neighbors"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`query_radius <sklearn.neighbors.BallTree.query_radius>`\\"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "query_radius(self, X, r, count_only = False):"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`reset_n_calls <sklearn.neighbors.BallTree.reset_n_calls>`\\"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`two_point_correlation "
"<sklearn.neighbors.BallTree.two_point_correlation>`\\"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Compute the two-point correlation function"
msgstr ""

#: :3
msgid "Initialize self.  See help(type(self)) for accurate signature."
msgstr ""

#: :8 :7
msgid "**X** : array_like"
msgstr ""

#: :10 :9
msgid ""
"An array of points to query.  Last dimension should match dimension of "
"training data."
msgstr ""

#: :13
msgid "**h** : float"
msgstr ""

#: :15
msgid "the bandwidth of the kernel"
msgstr ""

#: :17
msgid "**kernel** : string"
msgstr ""

#: :19
msgid ""
"specify the kernel to use.  Options are - 'gaussian' - 'tophat' - "
"'epanechnikov' - 'exponential' - 'linear' - 'cosine' Default is kernel = "
"'gaussian'"
msgstr ""

#: :28
msgid "**atol, rtol** : float (default = 0)"
msgstr ""

#: :30
msgid ""
"Specify the desired relative and absolute tolerance of the result. If the"
" true result is K_true, then the returned result K_ret satisfies "
"``abs(K_true - K_ret) < atol + rtol * K_ret`` The default is zero (i.e. "
"machine precision) for both."
msgstr ""

#: :35 :27
msgid "**breadth_first** : boolean (default = False)"
msgstr ""

#: :37
msgid ""
"if True, use a breadth-first search.  If False (default) use a depth-"
"first search.  Breadth-first is generally faster for compact kernels "
"and/or high tolerances."
msgstr ""

#: :41
msgid "**return_log** : boolean (default = False)"
msgstr ""

#: :43
msgid ""
"return the logarithm of the result.  This can be more accurate than "
"returning the result itself for narrow kernels."
msgstr ""

#: :48
msgid "**density** : ndarray"
msgstr ""

#: :50
msgid "The array of (log)-density evaluations, shape = X.shape[:-1]"
msgstr ""

#: :7 :9
msgid "**X** : array-like, last dimension self.dim"
msgstr ""

#: :9 :11
msgid "An array of points to query"
msgstr ""

#: :11
msgid "**k** : integer  (default = 1)"
msgstr ""

#: :13
msgid "The number of nearest neighbors to return"
msgstr ""

#: :15
msgid "**return_distance** : boolean (default = True)"
msgstr ""

#: :17
msgid ""
"if True, return a tuple (d, i) of distances and indices if False, return "
"array i"
msgstr ""

#: :20 :16
msgid "**dualtree** : boolean (default = False)"
msgstr ""

#: :22
msgid ""
"if True, use the dual tree formalism for the query: a tree is built for "
"the query points, and the pair of trees is used to efficiently search "
"this space.  This can lead to better performance as the number of points "
"grows large."
msgstr ""

#: :29
msgid ""
"if True, then query the nodes in a breadth-first manner. Otherwise, query"
" the nodes in a depth-first manner."
msgstr ""

#: :32
msgid "**sort_results** : boolean (default = True)"
msgstr ""

#: :34
msgid ""
"if True, then distances and indices of each point are sorted on return, "
"so that the first column contains the closest points. Otherwise, "
"neighbors are returned in an arbitrary order."
msgstr ""

#: :40
msgid "**i** : if return_distance == False"
msgstr ""

#: :42
msgid "**(d,i)** : if return_distance == True"
msgstr ""

#: :44
msgid "**d** : array of doubles - shape: x.shape[:-1] + (k,)"
msgstr ""

#: :46
msgid ""
"each entry gives the list of distances to the neighbors of the "
"corresponding point"
msgstr ""

#: :49
msgid "**i** : array of integers - shape: x.shape[:-1] + (k,)"
msgstr ""

#: :51
msgid ""
"each entry gives the list of indices of neighbors of the corresponding "
"point"
msgstr ""

#: :5
msgid "query the tree for neighbors within a radius r"
msgstr ""

#: :13
msgid "**r** : distance within which neighbors are returned"
msgstr ""

#: :15
msgid ""
"r can be a single value, or an array of values of shape x.shape[:-1] if "
"different radii are desired for each point."
msgstr ""

#: :18
msgid "**return_distance** : boolean (default = False)"
msgstr ""

#: :20
msgid ""
"if True,  return distances to neighbors of each point if False, return "
"only neighbors Note that unlike the query() method, setting "
"return_distance=True here adds to the computation time.  Not all "
"distances need to be calculated explicitly for return_distance=False.  "
"Results are not sorted by default: see ``sort_results`` keyword."
msgstr ""

#: :27
msgid "**count_only** : boolean (default = False)"
msgstr ""

#: :29
msgid ""
"if True,  return only the count of points within distance r if False, "
"return the indices of all points within distance r If "
"return_distance==True, setting count_only=True will result in an error."
msgstr ""

#: :34
msgid "**sort_results** : boolean (default = False)"
msgstr ""

#: :36
msgid ""
"if True, the distances and indices will be sorted before being returned."
"  If False, the results will not be sorted.  If return_distance == False,"
" setting sort_results = True will result in an error."
msgstr ""

#: :43
msgid "**count** : if count_only == True"
msgstr ""

#: :45
msgid "**ind** : if count_only == False and return_distance == False"
msgstr ""

#: :47
msgid "**(ind, dist)** : if count_only == False and return_distance == True"
msgstr ""

#: :49
msgid "**count** : array of integers, shape = X.shape[:-1]"
msgstr ""

#: :51
msgid ""
"each entry gives the number of neighbors within a distance r of the "
"corresponding point."
msgstr ""

#: :54
msgid "**ind** : array of objects, shape = X.shape[:-1]"
msgstr ""

#: :56
msgid ""
"each element is a numpy integer array listing the indices of neighbors of"
" the corresponding point.  Note that unlike the results of a k-neighbors "
"query, the returned neighbors are not sorted by distance by default."
msgstr ""

#: :61
msgid "**dist** : array of objects, shape = X.shape[:-1]"
msgstr ""

#: :63
msgid ""
"each element is a numpy double array listing the distances corresponding "
"to indices in i."
msgstr ""

#: :68
msgid "Query for neighbors in a given radius"
msgstr ""

#: :12
msgid "**r** : array_like"
msgstr ""

#: :14
msgid "A one-dimensional array of distances"
msgstr ""

#: :18
msgid ""
"If true, use a dualtree algorithm.  Otherwise, use a single-tree "
"algorithm.  Dual tree algorithms can have better scaling for large N."
msgstr ""

#: :24
msgid "**counts** : ndarray"
msgstr ""

#: :26
msgid ""
"counts[i] contains the number of pairs of points with distance less than "
"or equal to r[i]"
msgstr ""

#: :31
msgid "Compute the two-point autocorrelation function of X:"
msgstr ""

