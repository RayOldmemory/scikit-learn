# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst:2
msgid ":mod:`sklearn.neighbors`.RadiusNeighborsClassifier"
msgstr ""

#: :3
msgid "Classifier implementing a vote among neighbors within a given radius"
msgstr ""

#: :5
msgid "Read more in the :ref:`User Guide <classification>`."
msgstr ""

#: :9
msgid "**radius** : float, optional (default = 1.0)"
msgstr ""

#: :11
msgid ""
"Range of parameter space to use by default for :meth`radius_neighbors` "
"queries."
msgstr ""

#: :14
msgid "**weights** : str or callable"
msgstr ""

#: :16
msgid "weight function used in prediction.  Possible values:"
msgstr ""

#: :18
msgid ""
"'uniform' : uniform weights.  All points in each neighborhood are "
"weighted equally."
msgstr ""

#: :20
msgid ""
"'distance' : weight points by the inverse of their distance. in this "
"case, closer neighbors of a query point will have a greater influence "
"than neighbors which are further away."
msgstr ""

#: :23
msgid ""
"[callable] : a user-defined function which accepts an array of distances,"
" and returns an array of the same shape containing the weights."
msgstr ""

#: :27
msgid "Uniform weights are used by default."
msgstr ""

#: :29
msgid "**algorithm** : {'auto', 'ball_tree', 'kd_tree', 'brute'}, optional"
msgstr ""

#: :31
msgid "Algorithm used to compute the nearest neighbors:"
msgstr ""

#: :33
msgid "'ball_tree' will use :class:`BallTree`"
msgstr ""

#: :34
msgid "'kd_tree' will use :class:`KDtree`"
msgstr ""

#: :35
msgid "'brute' will use a brute-force search."
msgstr ""

#: :36
msgid ""
"'auto' will attempt to decide the most appropriate algorithm based on the"
" values passed to :meth:`fit` method."
msgstr ""

#: :39
msgid ""
"Note: fitting on sparse input will override the setting of this "
"parameter, using brute force."
msgstr ""

#: :42
msgid "**leaf_size** : int, optional (default = 30)"
msgstr ""

#: :44
msgid ""
"Leaf size passed to BallTree or KDTree.  This can affect the speed of the"
" construction and query, as well as the memory required to store the "
"tree.  The optimal value depends on the nature of the problem."
msgstr ""

#: :49
msgid "**metric** : string or DistanceMetric object (default='minkowski')"
msgstr ""

#: :51
msgid ""
"the distance metric to use for the tree.  The default metric is "
"minkowski, and with p=2 is equivalent to the standard Euclidean metric. "
"See the documentation of the DistanceMetric class for a list of available"
" metrics."
msgstr ""

#: :56
msgid "**p** : integer, optional (default = 2)"
msgstr ""

#: :58
msgid ""
"Power parameter for the Minkowski metric. When p = 1, this is equivalent "
"to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. "
"For arbitrary p, minkowski_distance (l_p) is used."
msgstr ""

#: :62
msgid "**outlier_label** : int, optional (default = None)"
msgstr ""

#: :64
msgid ""
"Label, which is given for outlier samples (samples with no neighbors on "
"given radius). If set to None, ValueError is raised, when outlier is "
"detected."
msgstr ""

#: :68
msgid "**metric_params** : dict, optional (default = None)"
msgstr ""

#: :70
msgid "Additional keyword arguments for the metric function."
msgstr ""

#: :74
msgid ""
":obj:`KNeighborsClassifier`, :obj:`RadiusNeighborsRegressor`, "
":obj:`KNeighborsRegressor`, :obj:`NearestNeighbors`"
msgstr ""

#: :77 :44
msgid "Notes"
msgstr ""

#: :78
msgid ""
"See :ref:`Nearest Neighbors <neighbors>` in the online documentation for "
"a discussion of the choice of ``algorithm`` and ``leaf_size``."
msgstr ""

#: :81
msgid "http://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm"
msgstr ""

#: :84 :52 :38
msgid "Examples"
msgstr ""

#: :95
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`fit <sklearn.neighbors.RadiusNeighborsClassifier.fit>`\\ (X, y)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit the model using X as training data and y as target values"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params "
"<sklearn.neighbors.RadiusNeighborsClassifier.get_params>`\\ ([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`predict <sklearn.neighbors.RadiusNeighborsClassifier.predict>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict the class labels for the provided data"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`radius_neighbors "
"<sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors>`\\ ([X, "
"radius, return_distance])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Finds the neighbors within a given radius of a point or points."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`radius_neighbors_graph "
"<sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph>`\\ "
"([X, radius, mode])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Computes the (weighted) graph of Neighbors for points in X"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`score <sklearn.neighbors.RadiusNeighborsClassifier.score>`\\ (X, "
"y[, sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns the mean accuracy on the given test data and labels."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params "
"<sklearn.neighbors.RadiusNeighborsClassifier.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: :7
msgid "**X** : {array-like, sparse matrix, BallTree, KDTree}"
msgstr ""

#: :9
msgid ""
"Training data. If array or matrix, shape [n_samples, n_features], or "
"[n_samples, n_samples] if metric='precomputed'."
msgstr ""

#: :12
msgid "**y** : {array-like, sparse matrix}"
msgstr ""

#: :14
msgid "Target values of shape = [n_samples] or [n_samples, n_outputs]"
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :7
msgid ""
"**X** : array-like, shape (n_query, n_features),                 or "
"(n_query, n_indexed) if metric == 'precomputed'"
msgstr ""

#: :9 :13
msgid "Test samples."
msgstr ""

#: :13
msgid "**y** : array of shape [n_samples] or [n_samples, n_outputs]"
msgstr ""

#: :15
msgid "Class labels for each data sample."
msgstr ""

#: :5
msgid ""
"Return the indices and distances of each point from the dataset lying in "
"a ball with size ``radius`` around the points of the query array. Points "
"lying on the boundary are included in the results."
msgstr ""

#: :9
msgid ""
"The result points are *not* necessarily sorted by distance to their query"
" point."
msgstr ""

#: :14
msgid "**X** : array-like, (n_samples, n_features), optional"
msgstr ""

#: :16 :12
msgid ""
"The query point or points. If not provided, neighbors of each indexed "
"point are returned. In this case, the query point is not considered its "
"own neighbor."
msgstr ""

#: :20 :16
msgid "**radius** : float"
msgstr ""

#: :22
msgid ""
"Limiting distance of neighbors to return. (default is the value passed to"
" the constructor)."
msgstr ""

#: :25
msgid "**return_distance** : boolean, optional. Defaults to True."
msgstr ""

#: :27
msgid "If False, distances will not be returned"
msgstr ""

#: :31
msgid "**dist** : array, shape (n_samples,) of arrays"
msgstr ""

#: :33
msgid ""
"Array representing the distances to each point, only present if "
"return_distance=True. The distance values are computed according to the "
"``metric`` constructor parameter."
msgstr ""

#: :37
msgid "**ind** : array, shape (n_samples,) of arrays"
msgstr ""

#: :39
msgid ""
"An array of arrays of indices of the approximate nearest points from the "
"population matrix that lie within a ball of size ``radius`` around the "
"query points."
msgstr ""

#: :45
msgid ""
"Because the number of neighbors of each point is not necessarily equal, "
"the results for multiple query points cannot be fit in a standard data "
"array. For efficiency, `radius_neighbors` returns arrays of objects, "
"where each object is a 1D array of indices or distances."
msgstr ""

#: :53
msgid ""
"In the following example, we construct a NeighborsClassifier class from "
"an array representing our data set and ask who's the closest point to [1,"
" 1, 1]:"
msgstr ""

#: :69
msgid ""
"The first array returned contains the distances to all points which are "
"closer than 1.6, while the second array returned contains their indices."
"  In general, multiple points can be queried at the same time."
msgstr ""

#: :5
msgid "Neighborhoods are restricted the points at a distance lower than radius."
msgstr ""

#: :10
msgid "**X** : array-like, shape = [n_samples, n_features], optional"
msgstr ""

#: :18
msgid "Radius of neighborhoods. (default is the value passed to the constructor)."
msgstr ""

#: :21
msgid "**mode** : {'connectivity', 'distance'}, optional"
msgstr ""

#: :23
msgid ""
"Type of returned matrix: 'connectivity' will return the connectivity "
"matrix with ones and zeros, in 'distance' the edges are Euclidean "
"distance between points."
msgstr ""

#: :29
msgid "**A** : sparse matrix in CSR format, shape = [n_samples, n_samples]"
msgstr ""

#: :31
msgid "A[i, j] is assigned the weight of edge that connects i to j."
msgstr ""

#: :35
msgid ":obj:`kneighbors_graph`"
msgstr ""

#: :5
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: :11
msgid "**X** : array-like, shape = (n_samples, n_features)"
msgstr ""

#: :15
msgid "**y** : array-like, shape = (n_samples) or (n_samples, n_outputs)"
msgstr ""

#: :17
msgid "True labels for X."
msgstr ""

#: :19
msgid "**sample_weight** : array-like, shape = [n_samples], optional"
msgstr ""

#: :21
msgid "Sample weights."
msgstr ""

#: :25
msgid "**score** : float"
msgstr ""

#: :27
msgid "Mean accuracy of self.predict(X) wrt. y."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

