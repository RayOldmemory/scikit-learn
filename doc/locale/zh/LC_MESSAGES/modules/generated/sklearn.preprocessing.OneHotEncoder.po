# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.preprocessing.OneHotEncoder.rst:2
msgid ":mod:`sklearn.preprocessing`.OneHotEncoder"
msgstr ""

#: :3
msgid "Encode categorical integer features using a one-hot aka one-of-K scheme."
msgstr ""

#: :5
msgid ""
"The input to this transformer should be a matrix of integers, denoting "
"the values taken on by categorical (discrete) features. The output will "
"be a sparse matrix where each column corresponds to one possible value of"
" one feature. It is assumed that input features take on values in the "
"range [0, n_values)."
msgstr ""

#: :11
msgid ""
"This encoding is needed for feeding categorical data to many scikit-learn"
" estimators, notably linear models and SVMs with the standard kernels."
msgstr ""

#: :14
msgid "Read more in the :ref:`User Guide <preprocessing_categorical_features>`."
msgstr ""

#: :18
msgid "**n_values** : 'auto', int or array of ints"
msgstr ""

#: :20
msgid "Number of values per feature."
msgstr ""

#: :22
msgid "'auto' : determine value range from training data."
msgstr ""

#: :23
msgid "int : maximum value for all features."
msgstr ""

#: :24
msgid "array : maximum value per feature."
msgstr ""

#: :26
msgid "**categorical_features: \"all\" or array of indices or mask** :"
msgstr ""

#: :28
msgid "Specify what features are treated as categorical."
msgstr ""

#: :30
msgid "'all' (default): All features are treated as categorical."
msgstr ""

#: :31
msgid "array of indices: Array of categorical feature indices."
msgstr ""

#: :32
msgid "mask: Array of length n_features and with dtype=bool."
msgstr ""

#: :34
msgid "Non-categorical features are always stacked to the right of the matrix."
msgstr ""

#: :36
msgid "**dtype** : number type, default=np.float"
msgstr ""

#: :38
msgid "Desired dtype of output."
msgstr ""

#: :40
msgid "**sparse** : boolean, default=True"
msgstr ""

#: :42
msgid "Will return sparse matrix if set True else will return an array."
msgstr ""

#: :44
msgid "**handle_unknown** : str, 'error' or 'ignore'"
msgstr ""

#: :46
msgid ""
"Whether to raise an error or ignore if a unknown categorical feature is "
"present during transform."
msgstr ""

#: :51
msgid "**active_features_** : array"
msgstr ""

#: :53
msgid ""
"Indices for active features, meaning values that actually occur in the "
"training set. Only available when n_values is ``'auto'``."
msgstr ""

#: :56
msgid "**feature_indices_** : array of shape (n_features,)"
msgstr ""

#: :58
msgid ""
"Indices to feature ranges. Feature ``i`` in the original data is mapped "
"to features from ``feature_indices_[i]`` to ``feature_indices_[i+1]`` "
"(and then potentially masked by `active_features_` afterwards)"
msgstr ""

#: :63
msgid "**n_values_** : array of shape (n_features,)"
msgstr ""

#: :65
msgid "Maximum number of values per feature."
msgstr ""

#: :70
msgid ":obj:`sklearn.feature_extraction.DictVectorizer`"
msgstr ""

#: :70
msgid ""
"performs a one-hot encoding of dictionary items (also handles string-"
"valued features)."
msgstr ""

#: :72
msgid ":obj:`sklearn.feature_extraction.FeatureHasher`"
msgstr ""

#: :73
msgid "performs an approximate one-hot encoding of dictionary items or strings."
msgstr ""

#: :76
msgid "Examples"
msgstr ""

#: :77
msgid ""
"Given a dataset with three features and two samples, we let the encoder "
"find the maximum value per feature and transform the data to a binary "
"one-hot encoding."
msgstr ""

#: :94
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.OneHotEncoder.fit>`\\ (X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit OneHotEncoder to X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.preprocessing.OneHotEncoder.fit_transform>`\\ (X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit OneHotEncoder to X, then transform X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params <sklearn.preprocessing.OneHotEncoder.get_params>`\\ "
"([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.preprocessing.OneHotEncoder.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.OneHotEncoder.transform>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Transform X using one-hot encoding."
msgstr ""

#: :7
msgid "**X** : array-like, shape [n_samples, n_feature]"
msgstr ""

#: :9
msgid "Input array of type int."
msgstr ""

#: :13 :12
msgid "**self** :"
msgstr ""

#: :5
msgid ""
"Equivalent to self.fit(X).transform(X), but more convenient and more "
"efficient. See fit for the parameters, transform for the return value."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :7
msgid "**X** : array-like, shape [n_samples, n_features]"
msgstr ""

#: :13
msgid "**X_out** : sparse matrix if sparse=True else a 2-d array, dtype=int"
msgstr ""

#: :15
msgid "Transformed input."
msgstr ""

#: ../../modules/generated/sklearn.preprocessing.OneHotEncoder.examples:3
msgid "Examples using ``sklearn.preprocessing.OneHotEncoder``"
msgstr ""

#: ../../modules/generated/sklearn.preprocessing.OneHotEncoder.examples:25
msgid ":ref:`example_ensemble_plot_feature_transformation.py`"
msgstr ""

