# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2014, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-16 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../modules/generated/sklearn.tree.DecisionTreeClassifier.rst:2
msgid ":mod:`sklearn.tree`.DecisionTreeClassifier"
msgstr ""

#: :3
msgid "A decision tree classifier."
msgstr ""

#: :5
msgid "Read more in the :ref:`User Guide <tree>`."
msgstr ""

#: :9
msgid "**criterion** : string, optional (default=\"gini\")"
msgstr ""

#: :11
msgid ""
"The function to measure the quality of a split. Supported criteria are "
"\"gini\" for the Gini impurity and \"entropy\" for the information gain."
msgstr ""

#: :14
msgid "**splitter** : string, optional (default=\"best\")"
msgstr ""

#: :16
msgid ""
"The strategy used to choose the split at each node. Supported strategies "
"are \"best\" to choose the best split and \"random\" to choose the best "
"random split."
msgstr ""

#: :20
msgid "**max_features** : int, float, string or None, optional (default=None)"
msgstr ""

#: :30
msgid "The number of features to consider when looking for the best split:"
msgstr ""

#: :23
msgid "If int, then consider `max_features` features at each split."
msgstr ""

#: :24
msgid ""
"If float, then `max_features` is a percentage and `int(max_features * "
"n_features)` features are considered at each split."
msgstr ""

#: :27
msgid "If \"auto\", then `max_features=sqrt(n_features)`."
msgstr ""

#: :28
msgid "If \"sqrt\", then `max_features=sqrt(n_features)`."
msgstr ""

#: :29
msgid "If \"log2\", then `max_features=log2(n_features)`."
msgstr ""

#: :30
msgid "If None, then `max_features=n_features`."
msgstr ""

#: :32
msgid ""
"Note: the search for a split does not stop until at least one valid "
"partition of the node samples is found, even if it requires to "
"effectively inspect more than ``max_features`` features."
msgstr ""

#: :36
msgid "**max_depth** : int or None, optional (default=None)"
msgstr ""

#: :38
msgid ""
"The maximum depth of the tree. If None, then nodes are expanded until all"
" leaves are pure or until all leaves contain less than min_samples_split "
"samples. Ignored if ``max_leaf_nodes`` is not None."
msgstr ""

#: :43
msgid "**min_samples_split** : int, optional (default=2)"
msgstr ""

#: :45
msgid "The minimum number of samples required to split an internal node."
msgstr ""

#: :47
msgid "**min_samples_leaf** : int, optional (default=1)"
msgstr ""

#: :49
msgid "The minimum number of samples required to be at a leaf node."
msgstr ""

#: :51
msgid "**min_weight_fraction_leaf** : float, optional (default=0.)"
msgstr ""

#: :53
msgid ""
"The minimum weighted fraction of the input samples required to be at a "
"leaf node."
msgstr ""

#: :56
msgid "**max_leaf_nodes** : int or None, optional (default=None)"
msgstr ""

#: :58
msgid ""
"Grow a tree with ``max_leaf_nodes`` in best-first fashion. Best nodes are"
" defined as relative reduction in impurity. If None then unlimited number"
" of leaf nodes. If not None then ``max_depth`` will be ignored."
msgstr ""

#: :63
msgid ""
"**class_weight** : dict, list of dicts, \"balanced\" or None, optional "
"(default=None)"
msgstr ""

#: :65
msgid ""
"Weights associated with classes in the form ``{class_label: weight}``. If"
" not given, all classes are supposed to have weight one. For multi-output"
" problems, a list of dicts can be provided in the same order as the "
"columns of y."
msgstr ""

#: :70
msgid ""
"The \"balanced\" mode uses the values of y to automatically adjust "
"weights inversely proportional to class frequencies in the input data as "
"``n_samples / (n_classes * np.bincount(y))``"
msgstr ""

#: :74
msgid "For multi-output, the weights of each column of y will be multiplied."
msgstr ""

#: :76
msgid ""
"Note that these weights will be multiplied with sample_weight (passed "
"through the fit method) if sample_weight is specified."
msgstr ""

#: :79
msgid ""
"**random_state** : int, RandomState instance or None, optional "
"(default=None)"
msgstr ""

#: :81
msgid ""
"If int, random_state is the seed used by the random number generator; If "
"RandomState instance, random_state is the random number generator; If "
"None, the random number generator is the RandomState instance used by "
"`np.random`."
msgstr ""

#: :86
msgid "**presort** : bool, optional (default=False)"
msgstr ""

#: :88
msgid ""
"Whether to presort the data to speed up the finding of best splits in "
"fitting. For the default settings of a decision tree on large datasets, "
"setting this to true may slow down the training process. When using "
"either a smaller dataset or a restricted depth, this may speed up the "
"training."
msgstr ""

#: :96
msgid "**classes_** : array of shape = [n_classes] or a list of such arrays"
msgstr ""

#: :98
msgid ""
"The classes labels (single output problem), or a list of arrays of class "
"labels (multi-output problem)."
msgstr ""

#: :101
msgid "**feature_importances_** : array of shape = [n_features]"
msgstr ""

#: :103
msgid ""
"The feature importances. The higher, the more important the feature. The "
"importance of a feature is computed as the (normalized) total reduction "
"of the criterion brought by that feature.  It is also known as the Gini "
"importance [R66]_."
msgstr ""

#: :108
msgid "**max_features_** : int,"
msgstr ""

#: :110
msgid "The inferred value of max_features."
msgstr ""

#: :112
msgid "**n_classes_** : int or list"
msgstr ""

#: :114
msgid ""
"The number of classes (for single output problems), or a list containing "
"the number of classes for each output (for multi-output problems)."
msgstr ""

#: :118
msgid "**n_features_** : int"
msgstr ""

#: :120
msgid "The number of features when ``fit`` is performed."
msgstr ""

#: :122
msgid "**n_outputs_** : int"
msgstr ""

#: :124
msgid "The number of outputs when ``fit`` is performed."
msgstr ""

#: :126
msgid "**tree_** : Tree object"
msgstr ""

#: :128
msgid "The underlying Tree object."
msgstr ""

#: :132
msgid ":obj:`DecisionTreeRegressor`"
msgstr ""

#: :135
msgid "References"
msgstr ""

#: :136
msgid "http://en.wikipedia.org/wiki/Decision_tree_learning"
msgstr ""

#: :138
msgid ""
"L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification and "
"Regression Trees\", Wadsworth, Belmont, CA, 1984."
msgstr ""

#: :141
msgid ""
"T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical "
"Learning\", Springer, 2009."
msgstr ""

#: :144
msgid ""
"L. Breiman, and A. Cutler, \"Random Forests\", "
"http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm"
msgstr ""

#: :152
msgid "Examples"
msgstr ""

#: :165
msgid "Methods"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`apply <sklearn.tree.DecisionTreeClassifier.apply>`\\ (X[, "
"check_input])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns the index of the leaf that each sample is predicted as."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit <sklearn.tree.DecisionTreeClassifier.fit>`\\ (X, y[, "
"sample_weight, check_input, ...])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Build a decision tree from the training set (X, y)."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.tree.DecisionTreeClassifier.fit_transform>`\\ (X[, y])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Fit to data, then transform it."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`get_params <sklearn.tree.DecisionTreeClassifier.get_params>`\\ "
"([deep])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Get parameters for this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`predict <sklearn.tree.DecisionTreeClassifier.predict>`\\ (X[, "
"check_input])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict class or regression value for X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`predict_log_proba "
"<sklearn.tree.DecisionTreeClassifier.predict_log_proba>`\\ (X)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict class log-probabilities of the input samples X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`predict_proba "
"<sklearn.tree.DecisionTreeClassifier.predict_proba>`\\ (X[, check_input])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Predict class probabilities of the input samples X."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`score <sklearn.tree.DecisionTreeClassifier.score>`\\ (X, y[, "
"sample_weight])"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Returns the mean accuracy on the given test data and labels."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`set_params <sklearn.tree.DecisionTreeClassifier.set_params>`\\ "
"(\\*\\*params)"
msgstr ""

#: ../../<autosummary>:1 :3
msgid "Set the parameters of this estimator."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`transform <sklearn.tree.DecisionTreeClassifier.transform>`\\ "
"(\\*args, \\*\\*kwargs)"
msgstr ""

#: ../../<autosummary>:1
msgid ""
"DEPRECATED: Support to use estimators as feature selectors will be "
"removed in version 0.19."
msgstr ""

#: :9
msgid "**X** : array_like or sparse matrix, shape = [n_samples, n_features]"
msgstr ""

#: :11 :13 :9 :16
msgid ""
"The input samples. Internally, it will be converted to "
"``dtype=np.float32`` and if a sparse matrix is provided to a sparse "
"``csr_matrix``."
msgstr ""

#: :15 :27 :17
msgid "**check_input** : boolean, (default=True)"
msgstr ""

#: :17 :29 :19 :9
msgid ""
"Allow to bypass several input checking. Don't use this parameter unless "
"you know what you do."
msgstr ""

#: :22
msgid "**X_leaves** : array_like, shape = [n_samples,]"
msgstr ""

#: :24
msgid ""
"For each datapoint x in X, return the index of the leaf x ends up in. "
"Leaves are numbered within ``[0; self.tree_.node_count)``, possibly with "
"gaps in the numbering."
msgstr ""

#: :3
msgid "Return the feature importances."
msgstr ""

#: :5
msgid ""
"The importance of a feature is computed as the (normalized) total "
"reduction of the criterion brought by that feature. It is also known as "
"the Gini importance."
msgstr ""

#: :11
msgid "**feature_importances_** : array, shape = [n_features]"
msgstr ""

#: :7
msgid "**X** : array-like or sparse matrix, shape = [n_samples, n_features]"
msgstr ""

#: :9
msgid ""
"The training input samples. Internally, it will be converted to "
"``dtype=np.float32`` and if a sparse matrix is provided to a sparse "
"``csc_matrix``."
msgstr ""

#: :13
msgid "**y** : array-like, shape = [n_samples] or [n_samples, n_outputs]"
msgstr ""

#: :15
msgid ""
"The target values (class labels in classification, real numbers in "
"regression). In the regression case, use ``dtype=np.float64`` and "
"``order='C'`` for maximum efficiency."
msgstr ""

#: :19
msgid "**sample_weight** : array-like, shape = [n_samples] or None"
msgstr ""

#: :21
msgid ""
"Sample weights. If None, then samples are equally weighted. Splits that "
"would create child nodes with net zero or negative weight are ignored "
"while searching for a split in each node. In the case of classification, "
"splits are also ignored if they would result in any single class carrying"
" a negative weight in either child node."
msgstr ""

#: :32
msgid "**X_idx_sorted** : array-like, shape = [n_samples, n_features], optional"
msgstr ""

#: :34
msgid ""
"The indexes of the sorted training input samples. If many tree are grown "
"on the same dataset, this allows the ordering to be cached between trees."
" If None, the data will be sorted here. Don't use this parameter unless "
"you know what to do."
msgstr ""

#: :41
msgid "**self** : object"
msgstr ""

#: :43
msgid "Returns self."
msgstr ""

#: :5
msgid ""
"Fits transformer to X and y with optional parameters fit_params and "
"returns a transformed version of X."
msgstr ""

#: :10
msgid "**X** : numpy array of shape [n_samples, n_features]"
msgstr ""

#: :12
msgid "Training set."
msgstr ""

#: :14
msgid "**y** : numpy array of shape [n_samples]"
msgstr ""

#: :16
msgid "Target values."
msgstr ""

#: :20
msgid "**X_new** : numpy array of shape [n_samples, n_features_new]"
msgstr ""

#: :22
msgid "Transformed array."
msgstr ""

#: :7
msgid "**deep: boolean, optional** :"
msgstr ""

#: :9
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: :14
msgid "**params** : mapping of string to any"
msgstr ""

#: :16
msgid "Parameter names mapped to their values."
msgstr ""

#: :5
msgid ""
"For a classification model, the predicted class for each sample in X is "
"returned. For a regression model, the predicted value based on X is "
"returned."
msgstr ""

#: :11 :7 :14
msgid "**X** : array-like or sparse matrix of shape = [n_samples, n_features]"
msgstr ""

#: :24
msgid "**y** : array of shape = [n_samples] or [n_samples, n_outputs]"
msgstr ""

#: :26
msgid "The predicted classes, or the predict values."
msgstr ""

#: :15 :22
msgid "**p** : array of shape = [n_samples, n_classes], or a list of n_outputs"
msgstr ""

#: :17
msgid ""
"such arrays if n_outputs > 1. The class log-probabilities of the input "
"samples. The order of the classes corresponds to that in the attribute "
"`classes_`."
msgstr ""

#: :5
msgid ""
"The predicted class probability is the fraction of samples of the same "
"class in a leaf."
msgstr ""

#: :10
msgid "check_input"
msgstr ""

#: :9
msgid "boolean, (default=True)"
msgstr ""

#: :24
msgid ""
"such arrays if n_outputs > 1. The class probabilities of the input "
"samples. The order of the classes corresponds to that in the attribute "
"`classes_`."
msgstr ""

#: :5
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: :11
msgid "**X** : array-like, shape = (n_samples, n_features)"
msgstr ""

#: :13
msgid "Test samples."
msgstr ""

#: :15
msgid "**y** : array-like, shape = (n_samples) or (n_samples, n_outputs)"
msgstr ""

#: :17
msgid "True labels for X."
msgstr ""

#: :19
msgid "**sample_weight** : array-like, shape = [n_samples], optional"
msgstr ""

#: :21
msgid "Sample weights."
msgstr ""

#: :25
msgid "**score** : float"
msgstr ""

#: :27
msgid "Mean accuracy of self.predict(X) wrt. y."
msgstr ""

#: :5
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as pipelines). The former have parameters of the form "
"``<component>__<parameter>`` so that it's possible to update each "
"component of a nested object."
msgstr ""

#: :12
msgid "**self** :"
msgstr ""

#: :3
msgid ""
"DEPRECATED: Support to use estimators as feature selectors will be "
"removed in version 0.19. Use SelectFromModel instead."
msgstr ""

#: :5
msgid "Reduce X to its most important features."
msgstr ""

#: :7
msgid ""
"Uses ``coef_`` or ``feature_importances_`` to determine the most "
"important features.  For models with a ``coef_`` for each class, the "
"absolute sum over the classes is used."
msgstr ""

#: :13
msgid "**X** : array or scipy sparse matrix of shape [n_samples, n_features]"
msgstr ""

#: :15
msgid "The input samples."
msgstr ""

#: :24
msgid "threshold"
msgstr ""

#: :23
msgid "string, float or None, optional (default=None)"
msgstr ""

#: :18
msgid ""
"The threshold value to use for feature selection. Features whose "
"importance is greater or equal are kept while the others are discarded. "
"If \"median\" (resp. \"mean\"), then the threshold value is the median "
"(resp. the mean) of the feature importances. A scaling factor (e.g., "
"\"1.25*mean\") may also be used. If None and if available, the object "
"attribute ``threshold`` is used. Otherwise, \"mean\" is used by default."
msgstr ""

#: :28
msgid "**X_r** : array of shape [n_samples, n_selected_features]"
msgstr ""

#: :30
msgid "The input samples with only the selected features."
msgstr ""

#: ../../modules/generated/sklearn.tree.DecisionTreeClassifier.examples:3
msgid "Examples using ``sklearn.tree.DecisionTreeClassifier``"
msgstr ""

#: ../../modules/generated/sklearn.tree.DecisionTreeClassifier.examples:25
msgid ":ref:`example_classification_plot_classifier_comparison.py`"
msgstr ""

#: ../../modules/generated/sklearn.tree.DecisionTreeClassifier.examples:45
msgid ":ref:`example_ensemble_plot_voting_decision_regions.py`"
msgstr ""

#: ../../modules/generated/sklearn.tree.DecisionTreeClassifier.examples:65
msgid ":ref:`example_ensemble_plot_adaboost_twoclass.py`"
msgstr ""

#: ../../modules/generated/sklearn.tree.DecisionTreeClassifier.examples:85
msgid ":ref:`example_ensemble_plot_adaboost_hastie_10_2.py`"
msgstr ""

#: ../../modules/generated/sklearn.tree.DecisionTreeClassifier.examples:105
msgid ":ref:`example_ensemble_plot_adaboost_multiclass.py`"
msgstr ""

#: ../../modules/generated/sklearn.tree.DecisionTreeClassifier.examples:125
msgid ":ref:`example_ensemble_plot_forest_iris.py`"
msgstr ""

#: ../../modules/generated/sklearn.tree.DecisionTreeClassifier.examples:145
msgid ":ref:`example_tree_plot_iris.py`"
msgstr ""

